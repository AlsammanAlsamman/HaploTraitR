!(rsid_col %in% colnames(gwas)) & !(pos_col %in% colnames(gwas)) & !(chr_col %in% colnames(gwas)) & !(pval_col %in% colnames(gwas)), stop("Columns not found in the GWAS file"),
!(rsid_col %in% colnames(gwas)), stop("rsid column not found in the GWAS file"),
!(pos_col %in% colnames(gwas)), stop("pos column not found in the GWAS file"),
!(chr_col %in% colnames(gwas)), stop("chr column not found in the GWAS file"),
!(pval_col %in% colnames(gwas)), stop("pval column not found in the GWAS file")
)
# Rename columns according to the specified global variables
colnames(gwas)[colnames(gwas) == rsid_col] <- "rsid"
colnames(gwas)[colnames(gwas) == pos_col] <- "pos"
colnames(gwas)[colnames(gwas) == chr_col] <- "chr"
colnames(gwas)[colnames(gwas) == pval_col] <- "p"
# Add rs id if not already present
if (!"rs" %in% colnames(gwas)) {
gwas$rs <- paste(gwas$chr, gwas$pos, sep = ":")
}
colnames(gwas)
# Set the configuration
#set_config(config)
set_config()
print_config()
# Set the configuration
#set_config(config)
set_config()
# Set the configuration
#set_config(config)
set_config()
print_config()
rm(list = ls())
# Set the configuration
#set_config(config)
set_config()
print_config()
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
gwas <- readGWAS(gwasfile, sep = "\t")
head(gwas)
#hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select significant snps
subhapmap<-extract_hapmap(hapmap, gwas)
hapmap <- readHapmap(hapfile)
# select significant snps
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno_table<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
# create a subfolder to store the plots
boxplot_geno_pheno_folder<-file.path(outfolder, "boxplot_geno_pheno")
if (!dir.exists(boxplot_geno_pheno_folder)) {
dir.create(boxplot_geno_pheno_folder, showWarnings = FALSE)
}
boxplot_genotype_phenotype(genotype_phenotype_data = geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
# Set the configuration
#set_config(config)
set_config()
# Set the configuration
#set_config(config)
set_config()
get_config()
# Set the configuration
#set_config(config)
set_config()
config_env <- new.env()
set_config()
get_config()
config_env <- new.env()
config_env <- new.env()
set_config()
get_config()
ls()
rm(list = ls())
ls()
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno", phenotypeunit = "cm"))
boxplot_genotype_phenotype(pheno, gwas, hapmap)
boxplot_genotype_phenotype(pheno, gwas, hapmap)
set_config(config = list(phenotypename = "testMePheno", phenotypeunit = "cm"))
boxplot_genotype_phenotype(pheno, gwas, hapmap)
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno", phenotypeunit = "cm"))
boxplot_genotype_phenotype(pheno, gwas, hapmap)
bxplts<-boxplot_genotype_phenotype(pheno, gwas, hapmap)
# http://adv-r.had.co.nz/Environments.html
library(HaploTraitR)
bxplts<-boxplot_genotype_phenotype(pheno, gwas, hapmap)
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
bxplts<-boxplot_genotype_phenotype(pheno, gwas, hapmap)
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
bxplts<-boxplot_genotype_phenotype(pheno, gwas, hapmap)
bxplts[[1]]
bxplts[[2]]
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
dist_clusters
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
bxplts<-boxplot_genotype_phenotype(pheno, gwas, hapmap)
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
## Step 3: Compute LD Matrices
## Step 3: Compute LD Matrices
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
bxplts<-boxplot_genotype_phenotype(pheno, gwas, hapmap)
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
clusterLDs <- getLDclusters(LDsInfo)
clusterLDs <- getLDclusters(LDsInfo)
LDsInfo
clusterLDs <- getLDclusters(LDsInfo)
clusterLDs <- getLDclusters(LDsInfo)
clusterLDs
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
bxplts<-boxplot_genotype_phenotype(pheno, gwas, hapmap)
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
LDsInfo
clusterLDs <- getLDclusters(LDsInfo)
clusterLDs
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
LDsInfo
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <- convertLDclusters2Haps(hapmap, clusterLDs)
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
LDsInfo
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <- convertLDclusters2Haps(hapmap, clusterLDs)
clusterLDs
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
LDsInfo
clusterLDs <- getLDclusters(LDsInfo)
clusterLDs
haplotypes <- convertLDclusters2Haps(hapmap, clusterLDs)
# get the configuration
comb_freq_threshold<-get_config("comb_freq_threshold")
comb_freq_threshold
# create a list to store the haplotype combinations
hap_comb<-list()
# loop over the clusters
for (i in 1:length(clusterLDs))
{
cluster<-clusterLDs[[i]]
# get the chromosome
chr<-strsplit(cluster[[1]][1], ":")[[1]][1]
# select the data of these snps
cluster.data<-hapmap[[chr]][cluster,]
# remove all non variant columns first 11 columns
cluster.data<-cluster.data[,-c(1:11)]
# transpose the data
cluster.data<-t(cluster.data)
# concatenate the data in one column
clusterComb<-apply(cluster.data, 1, paste, collapse="|")
# calculate the frequency of each combination
snpsComb<-as.data.frame(table(clusterComb))
totalsample<-sum(snpsComb$Freq)
snpsComb$Freq<-snpsComb$Freq/totalsample
snpsComb$snps<-paste(cluster, collapse="|")
snpsComb$chr<-chr
snpsComb$snp<-names(clusterLDs)[i]
# remove rows with frequency less than comb_freq_threshold
snpsComb<-snpsComb[snpsComb$Freq>comb_freq_threshold,]
snpsComb$comb<-1:nrow(snpsComb)
# append to hap_comb
hap_comb[[length(hap_comb)+1]]<-snpsComb
}
cluster<-clusterLDs[[i]]
cluster
# get the chromosome
chr<-strsplit(cluster[[1]][1], ":")[[1]][1]
haplotypes <- convertLDclusters2Haps(hapmap, clusterLDs)
# loop over the clusters
for (i in 1:length(clusterLDs))
{
cluster<-clusterLDs[[i]]
# if there is no cluster, skip
if(length(cluster)==0)
{
next
}
# get the chromosome
chr<-strsplit(cluster[[1]][1], ":")[[1]][1]
# select the data of these snps
cluster.data<-hapmap[[chr]][cluster,]
# remove all non variant columns first 11 columns
cluster.data<-cluster.data[,-c(1:11)]
# transpose the data
cluster.data<-t(cluster.data)
# concatenate the data in one column
clusterComb<-apply(cluster.data, 1, paste, collapse="|")
# calculate the frequency of each combination
snpsComb<-as.data.frame(table(clusterComb))
totalsample<-sum(snpsComb$Freq)
snpsComb$Freq<-snpsComb$Freq/totalsample
snpsComb$snps<-paste(cluster, collapse="|")
snpsComb$chr<-chr
snpsComb$snp<-names(clusterLDs)[i]
# remove rows with frequency less than comb_freq_threshold
snpsComb<-snpsComb[snpsComb$Freq>comb_freq_threshold,]
snpsComb$comb<-1:nrow(snpsComb)
# append to hap_comb
hap_comb[[length(hap_comb)+1]]<-snpsComb
}
hap_comb<-do.call(rbind, hap_comb)
hap_comb
haplotypes <- HappyTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes <- HappyTraitR:::convertLDclusters2Haps(hapmap, clusterLDs)
Info)
HaplotypeTraitR:::getLDclusters(LDsInfo)
HaploTraitR:::getLDclusters(LDsInfo)
HaploTraitR::getLDclusters(LDsInfo)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes
haplotypes <-  convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes <-  convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes <-  convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes
haplotypes <-  convertLDclusters2Haps(hapmap, clusterLDs)
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
LDsInfo
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes <-  convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes
haplotypes <-  convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes
haplotypes <-  convertLDclusters2Haps(hapmap, clusterLDs)
# Load the function from HaploTraitR package
HaploTraitR::convertLDclusters2Haps
# Compare with your local function definition
convertLDclusters2Haps
# Compare with your local function definition
convertLDclusters2Haps
# Compare with your local function definition
?convertLDclusters2Haps
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes
# ## Step 6: Get Sample Haplotypes and Save
#
# snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
getHapCombSamples
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample
#
# ## Step 8: Generate SNP Combination Tables
#
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
SNPcombTables
#
# ## Step 9: Perform t-tests on SNP Combinations
#
#
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
t_test_snpComp
# I think now we need to convert this to datafarme and save it
t_test_snpComp
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp
# !!!!!!!!!!
# I think now we need to convert this to datafarme and save it
# and here you can add the filtreation process as well
cls_snp
t_test_snpComp
t_test_snpComp
#
# ## Step 10: Visualize Results
#
#
outfolder<-get_config("outfolder")
outfolder
#
# ## Step 10: Visualize Results
#
#
outfolder<-get_config("outfolder")
outfolder
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
LDsInfo
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
t_test_snpComp
#
# ## Step 10: Visualize Results
#
#
outfolder<-get_config("outfolder")
outfolder
for (cls_snp in names(t_test_snpComp)) {
HaploTraitR::plotHapCombBoxPlot(cls_snp, SNPcombTables, t_test_snpComp, outfolder= outfolder)
ggplot2::ggsave(file.path(outfolder, paste0(cls_snp, "_LD_boxplot.png")), width = 8, height = 6)
}
# Merge data frames and add a column with the list name
merge_with_list_name <- function(df_list, pheno) {
df_list %>%
imap_dfr(~ mutate(.x, snp = .y)) %>%
select(snp, group1, group2, n1, n2, statistic, df, p, p.adj, p.adj.signif) %>%
mutate(pheno = pheno)
}
merged_df <- merge_with_list_name(t_test_snpComp, trait)
# Merge data frames and add a column with the list name
library(dplyr)
merge_with_list_name <- function(df_list, pheno) {
df_list %>%
imap_dfr(~ mutate(.x, snp = .y)) %>%
select(snp, group1, group2, n1, n2, statistic, df, p, p.adj, p.adj.signif) %>%
mutate(pheno = pheno)
}
merged_df <- merge_with_list_name(t_test_snpComp, trait)
merged_df <- merge_with_list_name(t_test_snpComp, "pheno")
library(purrr)
merge_with_list_name <- function(df_list, pheno) {
df_list %>%
imap_dfr(~ mutate(.x, snp = .y)) %>%
select(snp, group1, group2, n1, n2, statistic, df, p, p.adj, p.adj.signif) %>%
mutate(pheno = pheno)
}
merged_df <- merge_with_list_name(t_test_snpComp, "pheno")
merged_df
