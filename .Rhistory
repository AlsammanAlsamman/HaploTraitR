#
#
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
t_test_snpComp
# I think now we need to convert this to datafarme and save it
t_test_snpComp
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp
# !!!!!!!!!!
# I think now we need to convert this to datafarme and save it
# and here you can add the filtreation process as well
cls_snp
t_test_snpComp
t_test_snpComp
#
# ## Step 10: Visualize Results
#
#
outfolder<-get_config("outfolder")
outfolder
#
# ## Step 10: Visualize Results
#
#
outfolder<-get_config("outfolder")
outfolder
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
LDsInfo
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
t_test_snpComp
#
# ## Step 10: Visualize Results
#
#
outfolder<-get_config("outfolder")
outfolder
for (cls_snp in names(t_test_snpComp)) {
HaploTraitR::plotHapCombBoxPlot(cls_snp, SNPcombTables, t_test_snpComp, outfolder= outfolder)
ggplot2::ggsave(file.path(outfolder, paste0(cls_snp, "_LD_boxplot.png")), width = 8, height = 6)
}
# Merge data frames and add a column with the list name
merge_with_list_name <- function(df_list, pheno) {
df_list %>%
imap_dfr(~ mutate(.x, snp = .y)) %>%
select(snp, group1, group2, n1, n2, statistic, df, p, p.adj, p.adj.signif) %>%
mutate(pheno = pheno)
}
merged_df <- merge_with_list_name(t_test_snpComp, trait)
# Merge data frames and add a column with the list name
library(dplyr)
merge_with_list_name <- function(df_list, pheno) {
df_list %>%
imap_dfr(~ mutate(.x, snp = .y)) %>%
select(snp, group1, group2, n1, n2, statistic, df, p, p.adj, p.adj.signif) %>%
mutate(pheno = pheno)
}
merged_df <- merge_with_list_name(t_test_snpComp, trait)
merged_df <- merge_with_list_name(t_test_snpComp, "pheno")
library(purrr)
merge_with_list_name <- function(df_list, pheno) {
df_list %>%
imap_dfr(~ mutate(.x, snp = .y)) %>%
select(snp, group1, group2, n1, n2, statistic, df, p, p.adj, p.adj.signif) %>%
mutate(pheno = pheno)
}
merged_df <- merge_with_list_name(t_test_snpComp, "pheno")
merged_df
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
## Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
## Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
as.data.frame(evaluate_test_group0(t_test_snpComp))
# eavluate, actually I do not know what to do
evaluate_test_group0(t_test_snpComp)
t_test_snpComp[["7H:496430435"]]
# evaluate, actually I do not know what to do
evaluate_test_group0(t_test_snpComp)
as.data.frame(evaluate_test_group0(t_test_snpComp))
# evaluate, actually I do not know what to do
evaluate_test_group0(t_test_snpComp)
# evaluate, actually I do not know what to do
evaluated_snps<-evaluate_test_group0(t_test_snpComp)
evaluated_snps
# select snps that are true in eval0
selected_snps<-evaluated_snps[evaluated_snps$eval0==TRUE,]
selected_snps
# evaluate, actually I do not know what to do
evaluated_snps<-evaluate_test_group0(t_test_snpComp)
colnames(evaluated_snps)
selected_snps<-evaluated_snps[evaluated_snps$dir0==1,]
selected_snps
selected_snps<-evaluated_snps[evaluated_snps$dir0==1,]$snp
selected_snps
selected_snps<-unique(evaluated_snps[evaluated_snps$dir0==1,]$snp)
selected_snps
# evaluate, actually I do not know what to do
evaluated_snps<-evaluate_test_group0(t_test_snpComp)
colnames(evaluated_snps)
evaluated_snps
colnames(evaluated_snps)
selected_snps<-unique(evaluated_snps[evaluated_snps$dir0==1,]$snp)
selected_snps
generateHapCombBoxPlots(t_test_snpComp)
## Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
generateHapCombBoxPlots(t_test_snpComp)
generateHapCombBoxPlots(SNPcombTables,t_test_snpComp)
SNPcombTables
names(SNPcombTables)
names(t_test_snpComp)
# evaluate, actually I do not know what to do
evaluated_snps<-evaluate_test_group0(t_test_snpComp)
# select snps that are true in dir0
selected_snps<-unique(evaluated_snps[evaluated_snps$dir0==1,]$snp)
selected_snps
# plot selected snps
SNPcombTables[selected_snps]
# plot selected snps
head(SNPcombTables)
# plot selected snps
SNPcombTables[SNPcombTables$SNP %in% selected_snps,]
t_test_snpComp_selected<-t_test_snpComp[t_test_snpComp$snp %in% selected_snps,]
t_test_snpComp
t_test_snpComp_selected<-t_test_snpComp[selected_snps,]
t_test_snpComp[selected_snps,]
# evaluate, actually I do not know what to do
evaluated_snps<-evaluate_test_group0(t_test_snpComp)
# select snps that are true in dir0
selected_snps<-unique(evaluated_snps[evaluated_snps$dir0==1,]$snp)
# plot selected snps
SNPcombTables_selected<-SNPcombTables[SNPcombTables$SNP %in% selected_snps,]
selected_snps
t_test_snpComp_selected<-t_test_snpComp[[selected_snps]]
t_test_snpComp[[selected_snps]]
t_test_snpComp[selected_snps]
t_test_snpComp[selected_snps]
# plot selected snps
SNPcombTables_selected<-SNPcombTables[SNPcombTables$SNP %in% selected_snps,]
t_test_snpComp_selected<-t_test_snpComp[selected_snps]
generateHapCombBoxPlots(SNPcombTables_selected,t_test_snpComp_selected)
# evaluate, actually I do not know what to do
evaluated_snps<-evaluate_test_group0(t_test_snpComp)
evaluated_snps
evaluated_snps$dir0
# select snps that are true in dir0
selected_snps<-unique(evaluated_snps[evaluated_snps$dir0==-1,]$snp)
# plot selected snps
SNPcombTables_selected<-SNPcombTables[SNPcombTables$SNP %in% selected_snps,]
t_test_snpComp_selected<-t_test_snpComp[selected_snps]
generateHapCombBoxPlots(SNPcombTables_selected,t_test_snpComp_selected)
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
## Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
names(SNPcombTables)
names(t_test_snpComp)
generateHapCombBoxPlots(SNPcombTables,t_test_snpComp)
# ### Plot Haplotype Distribution
LDsInfo[[1]]
lDplots<-plotLDForClusters(ld_matrix_folder=LDsInfo[[1]], clusterLDs, outfolder=outfolder)
lDplots[[1]]
# ### Plot Haplotype Distribution
clusterLDs
lDplots<-plotLDForClusters(clusterLDs)
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
clusterLDs
haplotypes
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
## Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
# Generate boxplots that show the distribution of the haplotype combinations compared to eachother
generateHapCombBoxPlots(SNPcombTables,t_test_snpComp)
lDplots<-plotLDForClusters(clusterLDs)
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
## Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
lDplots<-plotLDForClusters(clusterLDs)
clusterLDs
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
## Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
clusterLDs
lDplots<-plotLDForClusters(clusterLDs)
lDplots
#clusterLDs
# ### Plot Haplotype Distribution
set_config(config = list(outfolder = result_folder))
#clusterLDs
# ### Plot Haplotype Distribution
set_config(config = list(outfolder = result_folder))
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
## Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
lDplots<-plotLDForClusters(clusterLDs)
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
## Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
lDplots<-plotLDForClusters(clusterLDs)
library(HaploTraitR)
# create output folder
result_folder <- create_unique_result_folder(location="sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# Data
gwasfile<-"sampledata/SignificantSNP_GWAS.tsv"
hapfile<-"sampledata/Barley_50K_KNNimp.hmp.txt"
phenofile<-"sampledata/Pheno_ANN19.tsv"
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
set_config(config = list(phenotypename = "testMePheno6", phenotypeunit = "cm"))
#
# ############################################################################################################
# ## Step 2: Cluster SNPs by Chromosome
#
dist_clusters <- getDistClusters(gwas, hapmap)
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <-  HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
## Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
LDCombs<-plotLDCombMatrix(clusterLDs, haplotypes, gwas)
library(HaploTraitR)
# Step 1: Create a unique output folder for results
result_folder <- create_unique_result_folder(location = "sampleout")
set_config(config = list(outfolder = result_folder))
get_config("outfolder")
# GWAS data file containing significant SNPs
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
# Hapmap file containing SNP genotypes
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
# Phenotype data file
phenofile <- "sampledata/Pheno_ANN19.tsv"
# Read GWAS data
gwas <- readGWAS(gwasfile, sep = "\t")
# Read Hapmap data
hapmap <- readHapmap(hapfile)
# Read Phenotype data
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# Set phenotype information in the configuration
set_config(config = list(phenotypename = "PH", phenotypeunit = "cm"))
# Step 3: Generate Boxplots for Genotype-Phenotype Distribution
# This step generates boxplots showing the distribution of haplotype combinations compared to each other.
bxplts <- boxplot_genotype_phenotype(pheno, gwas, hapmap)
# Step 4: Cluster SNPs by Chromosome
# This step clusters SNPs based on their chromosome and physical distance.
dist_clusters <- getDistClusters(gwas, hapmap)
# Step 5: Compute LD Matrices
# This step computes linkage disequilibrium (LD) matrices for each SNP cluster.
# The matrices will be saved in the outfolder/LD_matrices folder.
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
# Step 6: Cluster LD Values and Convert to Haplotypes
# This step clusters LD values and converts them to haplotypes.
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
# Step 7: Get Sample Haplotypes and Save
# This step extracts sample haplotypes from the hapmap data.
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
# Step 8: Generate SNP Combination Tables
# This step generates tables of SNP combinations and their corresponding phenotypes.
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
# Step 9: Perform t-tests on SNP Combinations
# This step performs t-tests on the SNP combinations to identify significant differences.
t_test_snpComp <- HaploTraitR::testSNPcombs(SNPcombTables)
# Step 10: Generate and Save Haplotype Combination Boxplots
# This step generates boxplots showing the distribution of haplotype combinations and saves them in categorized directories.
generateHapCombBoxPlots(SNPcombTables, t_test_snpComp)
# Step 11: Plot Haplotype Distribution
# This step plots the distribution of haplotypes for each LD cluster.
lDplots <- plotLDForClusters(clusterLDs)
# Step 12: Plot LD Combination Matrix with LD
# This step plots the LD combination matrix, showing the LD values for different SNP combinations.
LDCombs <- plotLDCombMatrix(clusterLDs, haplotypes, gwas)
install.packages("pkgdown")
getwd()
library(pkgdown)
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
usethis::use_package()
usethis::use_pkgdown()
usethis::use_pkgdown()
usethis::use_pkgdown()
build_site()
build_site()
usethis::use_pkgdown()
build_site()
library(pkgdown)
build_site()
build_site()
# Run once to configure your package to use and deploy pkgdown
usethis::use_pkgdown_github_pages()
# Preview your site locally before publishing
pkgdown::build_site()
