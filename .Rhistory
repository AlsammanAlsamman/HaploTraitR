method = "t.test")
library(HaploTraitR)
setwd("/home/samman/Documents/MyGitHub/HaploTraitR")
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value for two SNPs to be in LD
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select significant snps
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno_table<-get_pheno_geno(subhapmap, pheno)
head(geno_pheno_table)
# plot the boxplot
# create a subfolder to store the plots
boxplot_geno_pheno_folder<-file.path(outfolder, "boxplot_geno_pheno")
if (!dir.exists(boxplot_geno_pheno_folder)) {
dir.create(boxplot_geno_pheno_folder, showWarnings = FALSE)
}
boxplot_genotype_phenotype(geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
library(HaploTraitR)
setwd("/home/samman/Documents/MyGitHub/HaploTraitR")
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value for two SNPs to be in LD
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select significant snps
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno_table<-get_pheno_geno(subhapmap, pheno)
head(geno_pheno_table)
# plot the boxplot
# create a subfolder to store the plots
boxplot_geno_pheno_folder<-file.path(outfolder, "boxplot_geno_pheno")
if (!dir.exists(boxplot_geno_pheno_folder)) {
dir.create(boxplot_geno_pheno_folder, showWarnings = FALSE)
}
boxplot_genotype_phenotype(geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
boxplot_genotype_phenotype(geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
# plot the boxplot
# create a subfolder to store the plots
boxplot_geno_pheno_folder<-file.path(outfolder, "boxplot_geno_pheno")
library(HaploTraitR)
setwd("/home/samman/Documents/MyGitHub/HaploTraitR")
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value for two SNPs to be in LD
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select significant snps
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno_table<-get_pheno_geno(subhapmap, pheno)
head(geno_pheno_table)
# plot the boxplot
# create a subfolder to store the plots
boxplot_geno_pheno_folder<-file.path(outfolder, "boxplot_geno_pheno")
if (!dir.exists(boxplot_geno_pheno_folder)) {
dir.create(boxplot_geno_pheno_folder, showWarnings = FALSE)
}
boxplot_genotype_phenotype(geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
head(geno_pheno_table)
boxplot_genotype_phenotype
boxplot_genotype_phenotype
genotype_phenotype_data=geno_pheno_table
y_label = "Phenotype Value"
outfolder = NULL
method = "t.test"
# Ensure 'value' is treated as a factor
genotype_phenotype_data$value <- as.factor(genotype_phenotype_data$value)
# Generate consistent colors for SNP values
snp_var <- unique(genotype_phenotype_data$value)
snp_colors <- setNames(rainbow(length(snp_var)), snp_var)
# Extract unique SNP targets
snps_target <- unique(genotype_phenotype_data$variable)
plots <- list()
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP and remove 'NN' values
sub_data <- subset(genotype_phenotype_data, variable == snp & value != "NN")
# Check if sub_data is not empty
if (nrow(sub_data) == 0) {
message(paste("No data available for SNP:", snp))
next
}
# Rename columns for clarity
colnames(sub_data) <- c("Trait", "snp_var", "value")
# Perform the t-test or Wilcoxon test using compare_means()
stat.test <- tryCatch({
test_result <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = method           # Use the specified method
)
test_result$y.position <- max(sub_data$Trait) + 1  # Position above the boxplot
test_result
}, error = function(e) {
message(paste("Error in SNP", snp, ":", e$message))
NULL
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait, fill = value)) +
geom_violin(alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors) +
theme(legend.position = "none") +
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Genotype",
y = y_label)
if (!is.null(stat.test)) {
p <- p + stat_pvalue_manual(stat.test, label = "p.signif", tip.length = 0.01)
}
# Save or store the plot
if (!is.null(outfolder)) {
ggsave(filename = file.path(outfolder, paste0(snp, "_boxplot.png")), plot = p, width = 5, height = 5)
} else {
plots[[snp]] <- p
}
}
library(ggplot2)
library(ggpubr)
library(rstatix)
genotype_phenotype_data=geno_pheno_table
y_label = "Phenotype Value"
outfolder = NULL
method = "t.test"
# Ensure 'value' is treated as a factor
genotype_phenotype_data$value <- as.factor(genotype_phenotype_data$value)
# Generate consistent colors for SNP values
snp_var <- unique(genotype_phenotype_data$value)
snp_colors <- setNames(rainbow(length(snp_var)), snp_var)
# Extract unique SNP targets
snps_target <- unique(genotype_phenotype_data$variable)
plots <- list()
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP and remove 'NN' values
sub_data <- subset(genotype_phenotype_data, variable == snp & value != "NN")
# Check if sub_data is not empty
if (nrow(sub_data) == 0) {
message(paste("No data available for SNP:", snp))
next
}
# Rename columns for clarity
colnames(sub_data) <- c("Trait", "snp_var", "value")
# Perform the t-test or Wilcoxon test using compare_means()
stat.test <- tryCatch({
test_result <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = method           # Use the specified method
)
test_result$y.position <- max(sub_data$Trait) + 1  # Position above the boxplot
test_result
}, error = function(e) {
message(paste("Error in SNP", snp, ":", e$message))
NULL
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait, fill = value)) +
geom_violin(alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors) +
theme(legend.position = "none") +
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Genotype",
y = y_label)
if (!is.null(stat.test)) {
p <- p + stat_pvalue_manual(stat.test, label = "p.signif", tip.length = 0.01)
}
# Save or store the plot
if (!is.null(outfolder)) {
ggsave(filename = file.path(outfolder, paste0(snp, "_boxplot.png")), plot = p, width = 5, height = 5)
} else {
plots[[snp]] <- p
}
}
if (is.null(outfolder)) {
return(plots)
} else {
return(NULL)
}
boxplot_genotype_phenotype(genotype_phenotype_data=geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
head(geno_pheno_table)
boxplot_genotype_phenotype(genotype_phenotype_data = geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
library(ggplot2)
library(ggpubr)
library(rstatix)
genotype_phenotype_data=geno_pheno_table
y_label = "Phenotype Value"
outfolder = NULL
method = "t.test"
# Ensure 'value' is treated as a factor
genotype_phenotype_data$value <- as.factor(genotype_phenotype_data$value)
# Generate consistent colors for SNP values
snp_var <- unique(genotype_phenotype_data$value)
snp_colors <- setNames(rainbow(length(snp_var)), snp_var)
# Extract unique SNP targets
snps_target <- unique(genotype_phenotype_data$variable)
plots <- list()
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP and remove 'NN' values
sub_data <- subset(genotype_phenotype_data, variable == snp & value != "NN")
# Check if sub_data is not empty
if (nrow(sub_data) == 0) {
message(paste("No data available for SNP:", snp))
next
}
# Rename columns for clarity
colnames(sub_data) <- c("Trait", "snp_var", "value")
# Perform the t-test or Wilcoxon test using compare_means()
stat.test <- tryCatch({
test_result <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = method           # Use the specified method
)
test_result$y.position <- max(sub_data$Trait) + 1  # Position above the boxplot
test_result
}, error = function(e) {
message(paste("Error in SNP", snp, ":", e$message))
NULL
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait, fill = value)) +
geom_violin(alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors) +
theme(legend.position = "none") +
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Genotype",
y = y_label)
if (!is.null(stat.test)) {
p <- p + stat_pvalue_manual(stat.test, label = "p.signif", tip.length = 0.01)
}
# Save or store the plot
if (!is.null(outfolder)) {
ggsave(filename = file.path(outfolder, paste0(snp, "_boxplot.png")), plot = p, width = 5, height = 5)
} else {
plots[[snp]] <- p
}
}
# save the plots
if (is.null(outfolder)) {
for (i in seq_along(plots)) {
ggsave(filename = paste0(snps_target[i], "_boxplot.png"), plot = plots[[i]], width = 5, height = 5)
}
}
sub_data
head(sub_data)
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait, fill = value)) +
geom_violin(alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors) +
theme(legend.position = "none") +
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Genotype",
y = y_label)
p
plots[[snp]]
snp
plots[[1]]
plots[[2]]
plots
plots
test_result <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = method           # Use the specified method
)
test_result
test_result$y.position <- max(sub_data$Trait) + 1  # Position above the boxplot
test_result
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait, fill = value)) +
geom_violin(alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors) +
theme(legend.position = "none") +
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Genotype",
y = y_label)
p
p <- p + stat_pvalue_manual(stat.test, label = "p.signif", tip.length = 0.01)
p
p <- p + stat_pvalue_manual(test_result, label = "p.signif", tip.length = 0.01)
p
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait, fill = value)) +
geom_violin(alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors) +
theme(legend.position = "none") +
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Genotype",
y = y_label)
p
p <- p + stat_pvalue_manual(test_result, label = "p.signif", tip.length = 0.01)
p
test_result
p <- p + stat_pvalue_manual(test_result[1,], label = "p.signif", tip.length = 0.01)
p
test_result[1,]
test_result[1,]
test_result[1,1]
test_result[1,1]<-"value"
p <- p + stat_pvalue_manual(test_result, label = "p.signif", tip.length = 0.01)
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait, fill = value)) +
geom_violin(alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors) +
theme(legend.position = "none") +
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Genotype",
y = y_label)
p <- p + stat_pvalue_manual(test_result, label = "p.signif", tip.length = 0.01)
p
test_result
test_result
p <- p + stat_pvalue_manual(test_result, label = "p.signif", tip.length = 0.01)
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait, fill = value)) +
geom_violin(alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors) +
theme(legend.position = "none") +
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Genotype",
y = y_label)
p
p + stat_pvalue_manual(test_result, label = "p.signif", tip.length = 0.01)
test_result[1,1]<-"value"
test_result
p + stat_pvalue_manual(test_result, label = "p.signif", tip.length = 0.01)
# Perform the t-test or Wilcoxon test using compare_means()
stat.test <- tryCatch({
test_result <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = method           # Use the specified method
)
test_result
test_result$y.position <- max(sub_data$Trait) + 1  # Position above the boxplot
test_result
}, error = function(e) {
message(paste("Error in SNP", snp, ":", e$message))
NULL
})
stat.test
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait, fill = value)) +
geom_violin(alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors) +
theme(legend.position = "none") +
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Genotype",
y = y_label)
p
p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
# Perform the t-test using compare_means()
stat.test <- tryCatch({
test_result <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = method,          # Use the specified method can be "t.test" or "wilcox.test"
)
test_result$y.position <- max(sub_data$Trait) + 1  # Position above the boxplot
test_result # to return the result
}, error = function(e) {
print(paste("Error in", snp, ":", e))
NULL
})
p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
stat.test[1, ]
stat.test[1, 1]<-"value"
p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
stat_pvalue_manual
stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_violin(alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors) +
theme(legend.position = "none") +
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Genotype",
y = y_label)
p
stat.test[1, 1]<-"value"
stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
p + stat_pvalue_manual(stat.test, label = "p.signif", tip.length = 0.01)
boxplot_geno_pheno(boxplot_geno_pheno = geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
# plot the boxplot
# create a subfolder to store the plots
boxplot_geno_pheno_folder<-file.path(outfolder, "boxplot_geno_pheno")
boxplot_geno_pheno(geno_pheno = geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
boxplot_genotype_phenotype(genotype_phenotype_data = geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
# plot the boxplot
# create a subfolder to store the plots
boxplot_geno_pheno_folder<-file.path(outfolder, "boxplot_geno_pheno")
if (!dir.exists(boxplot_geno_pheno_folder)) {
dir.create(boxplot_geno_pheno_folder, showWarnings = FALSE)
}
head(geno_pheno_table)
boxplot_genotype_phenotype(genotype_phenotype_data = geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
boxplot_geno_pheno_folder
# plot the boxplot
# create a subfolder to store the plots
boxplot_geno_pheno_folder<-file.path(outfolder, "boxplot_geno_pheno")
if (!dir.exists(boxplot_geno_pheno_folder)) {
dir.create(boxplot_geno_pheno_folder, showWarnings = FALSE)
}
boxplot_geno_pheno_folder
library(HaploTraitR)
setwd("/home/samman/Documents/MyGitHub/HaploTraitR")
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value for two SNPs to be in LD
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select significant snps
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno_table<-get_pheno_geno(subhapmap, pheno)
head(geno_pheno_table)
# plot the boxplot
# create a subfolder to store the plots
boxplot_geno_pheno_folder<-file.path(outfolder, "boxplot_geno_pheno")
if (!dir.exists(boxplot_geno_pheno_folder)) {
dir.create(boxplot_geno_pheno_folder, showWarnings = FALSE)
}
head(geno_pheno_table)
boxplot_geno_pheno_folder
boxplot_genotype_phenotype(genotype_phenotype_data = geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
warnings()
boxplot_genotype_phenotype(genotype_phenotype_data = geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
warnings()
snp_colors
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) + #, fill = value
geom_violin(alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.5) +
#      scale_fill_manual(values = snp_colors) +
# color fill
scale_fill_manual(values = snp_colors) +
theme(legend.position = "none") +
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Genotype",
y = y_label)
p
boxplot_genotype_phenotype(genotype_phenotype_data = geno_pheno_table,
outfolder = boxplot_geno_pheno_folder,
method = "t.test")
warnings()
