comb_sample
#' Calculate the p-value for a SNP combinations
#' @param comb_sample_Tables A list of sample tables for each SNP combination
#' @return A data frame with the p-values for the SNP combinations
#' @export
testSNPcombs <- function(comb_sample_Tables) {
snps <- names(comb_sample_Tables)
hap_comb_tests <- list()
snpadded<-c()
for (snp in snps) {
# Initialize comb_sample as a data frame with specified column types
comb_sample <- comb_sample_Tables[[snp]]
# Convert "Comb" to factor
comb_sample$Comb <- factor(comb_sample$Comb)
# Perform statistical test if there are enough samples
tryCatch({
# Ensure there are at least two levels in "Comb" and sufficient data for testing
if (length(unique(comb_sample$Comb)) > 1 && nrow(comb_sample) > 2) {
stat.test <- comb_sample %>% t_test(Pheno ~ Comb)
stat.test <- stat.test %>% add_xy_position(x = "Pheno")
# Set xmin and xmax based on the group1 and group2 column values
stat.test <- stat.test %>%
mutate(xmin = as.numeric(factor(group1, levels = levels(comb_sample$Comb))),
xmax = as.numeric(factor(group2, levels = levels(comb_sample$Comb))))
stat.test$snp <- snp
if (nrow(stat.test) > 0) {
hap_comb_tests <- append(hap_comb_tests, list(stat.test))
snpadded<-append(snpadded, snp)
}
}
}, error = function(e) {
message(paste("Error in SNP", snp, ": ", e$message))
})
}
names(hap_comb_tests) <- snpadded
return(hap_comb_tests)
}
t_test_snpComp<- testSNPcombs(SNPcombTables)
t_test_snpComp
snp<-"2H_JHI-Hv50k-2016-79696"
comb_sample<-SNPcombTables[[snp]]
# The comb should be taken from the samples samples as before
# Boxplot with significance annotations
p <- ggplot(comb_sample, aes(x = Comb, y = Pheno)) +
geom_violin(aes(fill = Comb),
alpha = 0.5) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Phenotype Distribution by Haplotype Combination for SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value") +
theme(legend.position = "none")
p
# Adding the significance brackets
p <- p + stat_pvalue_manual(t_test_snpComp[[snp]], label = "p.adj.signif", tip.length = 0.01)
# Display the plot
print(p)
SNPcombTables
comb_sample
# Create a matrix with the combinations as rows and the samples as columns
comb_matrix <- comb_sample %>%
select(Sample, Comb) %>%
spread(Sample, Comb) %>%
column_to_rownames("Comb")
# Create a matrix with the combinations as rows and the samples as columns
library(dplyr)
comb_matrix <- comb_sample %>%
select(Sample, Comb) %>%
spread(Sample, Comb) %>%
column_to_rownames("Comb")
library(textshape)
comb_matrix <- comb_sample %>%
select(Sample, Comb) %>%
spread(Sample, Comb) %>%
column_to_rownames("Comb")
comb_matrix <- comb_sample %>%
select(Sample, Comb) %>%
spread(Sample, Comb) %>%
column_to_rownames("Comb")
library(textshape)
comb_matrix <- comb_sample %>%
select(Sample, Comb) %>%
spread(Sample, Comb) %>%
column_to_rownames("Comb")
library(textshape)
comb_matrix <- comb_sample %>%
select(Sample, Comb) %>%
spread(Sample, Comb) %>%
column_to_rownames("Comb")
comb_matrix <- comb_sample %>%
select(Sample, Comb) %>%
spread(Sample, Comb)
comb_matrix
comb_sample
library(pheatmap)
# Pivot data to wide format where rows are samples, columns are combs, and values are pheno
library(reshape2)
df_wide <- dcast(df, Sample ~ Comb, value.var = "Pheno")
comb_sample
df_wide <- dcast(comb_sample, Sample ~ Comb, value.var = "Pheno")
# Set row names as Sample IDs and remove Sample column for the matrix input
rownames(df_wide) <- df_wide$Sample
df_wide$Sample <- NULL
# Generate heatmap
pheatmap(df_wide,
scale = "none",            # Scale options: "none", "row", "column"
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
display_numbers = TRUE)    # Display values in cells (optional)
# Generate heatmap
pheatmap(df_wide,
scale = "none",            # Scale options: "none", "row", "column"
#         clustering_distance_rows = "euclidean",
#         clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
display_numbers = TRUE)    # Display values in cells (optional)
# Generate heatmap
pheatmap(df_wide,
scale = "none",            # Scale options: "none", "row", "column"
#         clustering_distance_rows = "euclidean",
#         clustering_distance_cols = "euclidean",
#         clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
display_numbers = TRUE)    # Display values in cells (optional)
df_wide
# replace NA with 0
df_wide[is.na(df_wide)] <- 0
# Generate heatmap
pheatmap(df_wide,
scale = "none",            # Scale options: "none", "row", "column"
#         clustering_distance_rows = "euclidean",
#         clustering_distance_cols = "euclidean",
#         clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
display_numbers = TRUE)    # Display values in cells (optional)
# Generate heatmap
pheatmap(df_wide,
scale = "none",            # Scale options: "none", "row", "column"
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
display_numbers = TRUE)    # Display values in cells (optional)
# Generate heatmap
pheatmap(df_wide,
scale = "none",            # Scale options: "none", "row", "column"
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
display_numbers = TRUE)    # Display values in cells (optional)
# Generate heatmap
pheatmap(df_wide,
scale = "none",            # Scale options: "none", "row", "column"
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45)    # Display values in cells (optional)
# Generate heatmap
pheatmap(df_wide,
scale = "none",            # Scale options: "none", "row", "column"
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45)    # Display values in cells (optional)
df_wide$Sample
df_wide$Sample
df_wide
# Generate heatmap
pheatmap(df_wide,
scale = "none",
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45)    # Display values in cells (optional)
# Generate heatmap
pheatmap(df_wide,
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45)    # Display values in cells (optional)
# Generate heatmap
pheatmap(df_wide,
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
# do not cluster rows
cluster_rows = FALSE)
# Generate heatmap
pheatmap(df_wide,
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
# do not cluster rows
cluster_cols = FALSE)
comb_sample
ggplot(comb_sample, aes(x = Pheno, fill = Comb)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(title = paste("Phenotype Distribution by Haplotype Combination for SNP", snp),
x = "Phenotype Value",
y = "Density") +
theme(legend.position = "none")
ggplot(comb_sample, aes(x = Pheno, fill = Comb)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(title = paste("Phenotype Distribution by Haplotype Combination for SNP", snp),
x = "Phenotype Value",
y = "Density")
################################
library(pheatmap)
# Pivot data to wide format where rows are samples, columns are combs, and values are pheno
library(reshape2)
df_wide <- dcast(comb_sample, Sample ~ Comb, value.var = "Pheno")
# Set row names as Sample IDs and remove Sample column for the matrix input
rownames(df_wide) <- df_wide$Sample
df_wide
df_wide$Sample
df_wide$Sample <- NULL
# replace NA with 0
df_wide[is.na(df_wide)] <- 0
# Generate heatmap
pheatmap(df_wide,
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
# do not cluster rows
cluster_cols = FALSE)
# Generate heatmap
pheatmap(df_wide,
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
# do not cluster rows
cluster_cols = FALSE)
ggplot(comb_sample, aes(x = Pheno, fill = Comb)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(title = paste("Phenotype Distribution by Haplotype Combination for SNP", snp),
x = "Phenotype Value",
y = "Density")
################################
library(pheatmap)
# Pivot data to wide format where rows are samples, columns are combs, and values are pheno
library(reshape2)
df_wide <- dcast(comb_sample, Sample ~ Comb, value.var = "Pheno")
# Set row names as Sample IDs and remove Sample column for the matrix input
rownames(df_wide) <- df_wide$Sample
df_wide
df_wide$Sample
df_wide$Sample <- NULL
# replace NA with 0
df_wide[is.na(df_wide)] <- 0
# Generate heatmap
pheatmap(df_wide,
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
# do not cluster rows
cluster_cols = FALSE)
df_wide
snp<-"2H_JHI-Hv50k-2016-79696"
comb_sample<-SNPcombTables[[snp]]
# The comb should be taken from the samples samples as before
# Boxplot with significance annotations
p <- ggplot(comb_sample, aes(x = Comb, y = Pheno)) +
geom_violin(aes(fill = Comb),
alpha = 0.5) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Phenotype Distribution by Haplotype Combination for SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value") +
theme(legend.position = "none")
p
# Adding the significance brackets
p <- p + stat_pvalue_manual(t_test_snpComp[[snp]], label = "p.adj.signif", tip.length = 0.01)
# Display the plot
print(p)
plotHapCombBoxPlot <- function(snp, SNPcombTables, t_test_snpComp) {
# Extract the data frame for the specified SNP
comb_sample <- SNPcombTables[[snp]]
# Create a boxplot with significance annotations
p <- ggplot(comb_sample, aes(x = Comb, y = Pheno)) +
geom_violin(aes(fill = Comb), alpha = 0.5) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Phenotype Distribution by Haplotype Combination for SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value") +
theme(legend.position = "none")
# Add significance brackets to the plot
p <- p + stat_pvalue_manual(t_test_snpComp[[snp]], label = "p.adj.signif", tip.length = 0.01)
# Display the plot
print(p)
}
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
# Generate heatmap
pheatmap(df_wide,
clustering_method = "complete",
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red color gradient
main = "Impact of Each Comb on Pheno Across Samples",
angle_col = 45,
# do not cluster rows
cluster_cols = FALSE)
ggplot(comb_sample, aes(x = Pheno, fill = Comb)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(title = paste("Phenotype Distribution by Haplotype Combination for SNP", snp),
x = "Phenotype Value",
y = "Density")
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
ggplot(comb_sample, aes(x = Pheno, fill = Comb)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(title = paste("Phenotype Distribution by Haplotype Combination for SNP", snp),
x = "Phenotype Value",
y = "Density")
plotHapCombDistribution(snp, SNPcombTables)
SNPcombTables
###############
# merge the haplotype combinations
SNPcombTablesCombined<-lapply(SNPcombTables, function(x) {
x$SNP<-rownames(x)
x
})
SNPcombTablesCombined
###############
# merge the haplotype combinations
SNPcombTablesCombined<-lapply(SNPcombTables, function(x) {
x$SNP<-rownames(x)
x
})
plotHapCombDistribution
SNPcombTablesCombined
SNPcombTablesCombined
SNPcombTablesCombined<-do.call(rbind, SNPcombTablesCombined)
SNPcombTablesCombined
###############
# merge the haplotype combinations
SNPcombTablesCombined<-lapply(SNPcombTables, function(x) {
x$SNP<-rownames(x)
x
})
SNPcombTablesCombined<-do.call(rbind, SNPcombTablesCombined)
SNPcombTablesCombined
###############
# merge the haplotype combinations
# add SNP as a column
snpcombsample$SNP<-sapply(rownames(snpcombsample), function(x) strsplit(x, "_")[[1]][1])
snpcombsample
###############
# merge the haplotype combinations
# add SNP as a column
SNPcombTables<-lapply(SNPcombTables, function(x) {x$SNP<-snp; return(x)})
SNPcombTables
# merge the tables
SNPcombTables<-do.call(rbind, SNPcombTables)
ggplot(SNPcombTables, aes(x=SNP, y=mean, fill=Pheno)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
# plot the boxplot of the snp haplotype combinations
SNPcombTables
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=Pheno)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=SNP)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
# plot the boxplot of the snp haplotype combinations
SNPcombTables
SNPcombTables<-getSNPcombTables(snpcombsample, pheno)
SNPcombTables
###############
# merge the haplotype combinations
# add SNP as a column
for(i in 1:length(SNPcombTables))
{
SNPcombTables[[i]]$SNP<-names(SNPcombTables)[i]
}
# merge the tables
SNPcombTables<-do.call(rbind, SNPcombTables)
# plot the boxplot of the snp haplotype combinations
SNPcombTables
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=SNP)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=mean(Pheno))
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=mean(Pheno))+
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=mean(Pheno)))+
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb)
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb+SNP, scales="free_y")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb+SNP, scales="free")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb+SNP)
p<-ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb+SNP, scales="free")
ggsave(file=file.path(outfolder, "Haplotypes_boxplot.png"), p, width=10, height=10, units="in", dpi=300)
ggsave(file=file.path(outfolder, "Haplotypes_boxplot.pdf"), p, width=10, height=10, units="in", dpi=300)
ggsave(file=file.path(outfolder, "Haplotypes_boxplot.pdf"), p, width=30, height=30, units="in", dpi=300)
library(HaploTraitR)
hapfile<-"~/Documents/MyGitHub/HaploTraitR_related/sampleData/GWAS_Out/Barley_50K_KNNimp.hmp.txt"
gwasfile<-"~/Documents/MyGitHub/HaploTraitR_related/sampleData/sample_package_data/SignificantSNP_GWAS.csv"
phenofile<-"~/Documents/MyGitHub/HaploTraitR_related/sampleData/sample_package_data/Pheno_ANN19.tsv"
outfolder<-"~/Documents/MyGitHub/HaploTraitR_related/haploLDOut"
# threshold distance
dist_threshold<-1000000 # for staring clustering all SNPs within 1Mb of the significant SNPs
# dist_threshold
dist_cluster_count<-5 # The minimum number of SNPs in a cluster
# ld_threshold
ld_threshold<-0.3 # The minimum LD value to consider two SNPs in LD
# combination frequency threshold
comb_freq_threshold<-0.1 # The minimum genotypes with the same combination to consider the combination
# cluster the SNPs by Chr
gwas<-readGWAS(gwasfile,sep=",")
# haplotype file
hapmap<-readHapmap(hapfile)
# Call the function
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
# Compute the LD matrices
LDsInfo<-computeLDclusters(hapmap, haplotype_clusters)
# save to outfolder
saveLDs2folder(LDsInfo, outfolder)
clusterLDs<-clusterLD(LDsInfo, ld_threshold,cls_count=3)
haplotypes<-convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
haplotypes
snpcombsample<-getHapCombSamples(haplotypes, hapmap)
snpcombsample<-as.data.frame(snpcombsample)
# save the haplotype combinations
write.csv(snpcombsample, file=file.path(outfolder, "haplotype_combinations.csv"), row.names=FALSE)
# read the phenotype data
pheno<-read.csv(phenofile, header=TRUE, sep="\t")
SNPcombTables<-getSNPcombTables(snpcombsample, pheno)
t_test_snpComp<- testSNPcombs(SNPcombTables)
snp<-"2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
plotHapCombDistribution(snp, SNPcombTables)
###############
# merge the haplotype combinations
# add SNP as a column
for(i in 1:length(SNPcombTables))
{
SNPcombTables[[i]]$SNP<-names(SNPcombTables)[i]
}
# merge the tables
SNPcombTables<-do.call(rbind, SNPcombTables)
p<-ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb+SNP, scales="free")
