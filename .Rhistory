)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_boxplot(aes(fill = value)) +
scale_fill_manual(values = snp_colors)
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder)
}
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test",         # Specify Welch Two Sample t-test
p.adjust.method = "bonferroni"  # Apply Bonferroni correction
)
stat.test
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test",         # Specify Welch Two Sample t-test
p.adjust.method = "bonferroni"  # Apply Bonferroni correction
)
stat.test
stat.test <- t_test(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
stat.test <- t_test(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data
)
t_test
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- t_test(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_boxplot(aes(fill = value)) +
scale_fill_manual(values = snp_colors)
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_boxplot(aes(fill = value)) +
scale_fill_manual(values = snp_colors)
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_boxplot(aes(fill = value)) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_boxplot(aes(fill = value)) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_boxplot(aes(fill = value)) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder, width = 8, height = 6)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_boxplot(aes(fill = value)) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder, width = 6, height = 6)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_boxplot(aes(fill = value)) +
geom_jitter(width = 0.2) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder, width = 6, height = 6)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_violin(aes(fill = value)) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder, width = 6, height = 6)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_violin(aes(fill = value, alpha = 0.1)) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder, width = 6, height = 6)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_violin(aes(fill = value, alpha = 0.01)) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder, width = 6, height = 6)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_violin(aes(fill = value, alpha = 0.01)) +
geom_jitter(width = 0.2, alpha = 0.1) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder, width = 6, height = 6)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_violin(aes(fill = value, alpha = 0.01)) +
geom_jitter(width = 0.2, alpha = 0.2) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder, width = 6, height = 6)
}
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno_melt[geno_pheno_melt$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_violin(aes(fill = value, alpha = 0.01)) +
geom_jitter(width = 0.2, alpha = 0.3) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder, width = 6, height = 6)
}
