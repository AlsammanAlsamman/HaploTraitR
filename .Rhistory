Trait_name<-"PH"
hapmap
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
subhapmap
get_pheno_geno(subhapmap, pheno)
colnames(pheno)<-c("Taxa", "Phenotype")
# rbinding the hapmap
subhapmap <- do.call(rbind, subhapmap)
subhapmap
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
subhapmap
subhapmap
# rbinding the hapmap
subhapmap_bind <- do.call(rbind, subhapmap)
subhapmap_bind
# rbinding the hapmap
subhapmap_bind <- do.call(rbind, subhapmap, fill=TRUE)
subhapmap
subhapmap_bind
)
)
# rbinding the hapmap
subhapmap_bind <- do.call(rbind, subhapmap)
subhapmap_bind
subhapmap
subhapmap_bind
subhapmap
subhapmap_bind
# rbinding the hapmap
subhapmap_bind <- apply(subhapmap, 2, paste, collapse="")
subhapmap
subhapmap_bind
# rbinding the hapmap
subhapmap_bind <- data.frame(row.names=rownames(subhapmap), subhapmap)
# rbinding the hapmap
subhapmap_bind <- do.call(rbind, subhapmap)
subhapmap
subhapmap_bind
# rbinding the hapmap
subhapmap_bind <- unlist(subhapmap)
subhapmap
subhapmap_bind
# rbinding the hapmap
subhapmap_bind <- do.call(rbind, subhapmap)
subhapmap
subhapmap_bind
get_pheno_geno(subhapmap, pheno)
# rbinding the hapmap
# remove names
names(subhapmap)<-NULL
subhapmap_bind <- do.call(rbind, subhapmap)
subhapmap_bind
get_pheno_geno(subhapmap, pheno)
geno_pheno_melt
colnames(geno_pheno_melt)
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
#################################
# Extract unique SNP values
snp_var <- unique(geno_pheno$value)
# Generate consistent colors for SNP values
snp_colors <- rainbow(length(snp_var))
names(snp_colors) <- snp_var  # Assign names for consistent mapping
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno[geno_pheno$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_violin(aes(fill = value, alpha = 0.01)) +
geom_jitter(width = 0.2, alpha = 0.3) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder, width = 6, height = 6)
}
snp_var
# Subset data for the SNP
sub_data <- geno_pheno[geno_pheno$variable %in% snp, ]
sub_data
#################################
# Extract unique SNP values
snp_var <- unique(geno_pheno$value)
snp_var
geno_pheno
#################################
# Extract unique SNP values
snp_var <- unique(geno_pheno$value)
# Generate consistent colors for SNP values
snp_colors <- rainbow(length(snp_var))
names(snp_colors) <- snp_var  # Assign names for consistent mapping
snps_target
snps_target<-unique(geno_pheno$variable)
snps_target
# Loop through the SNP targets
for (snp in snps_target) {
# Subset data for the SNP
sub_data <- geno_pheno[geno_pheno$variable %in% snp, ]
colnames(sub_data) <- c("Trait", "snp_var", "value")
sub_data$value <- as.factor(sub_data$value)
# remove the NN values
sub_data<-sub_data[!sub_data$value=="NN",]
stat.test <- NULL
# Perform the t-test using compare_means()
tryCatch({
stat.test <- compare_means(
formula = Trait ~ value,  # Define the formula for comparison
data = sub_data,          # Use the subset data
method = "t.test"         # Specify Welch Two Sample t-test
)
# Add y.position for annotations
stat.test <- stat.test %>%
mutate(y.position = max(sub_data$Trait) + 1)  # Position above the boxplot
}, error = function(e) {
print(paste("Error in", snp, ":", e))
})
# Create the boxplot with annotations
p <- ggplot(sub_data, aes(x = value, y = Trait)) +
geom_violin(aes(fill = value, alpha = 0.01)) +
geom_jitter(width = 0.2, alpha = 0.3) +
scale_fill_manual(values = snp_colors)+
# no legend
theme(legend.position = "none")+
# labs title
labs(title = paste("Phenotype Distribution by SNP", snp),
x = "Haplotype Combination",
y = "Phenotype Value")
if (!is.null(stat.test)) {
p<- p + stat_pvalue_manual(stat.test[1, ], label = "p.signif", tip.length = 0.01)
}
ggsave(paste0(snp, "_boxplot.png"), plot = p, path = outfolder, width = 6, height = 6)
}
boxplot_geno_pheno(geno_pheno, outfolder)
boxplot_geno_pheno(geno_pheno, outfolder)
## New addition
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
## New addition
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
## New addition
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
## New addition
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
dist_clusters <- getDistClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, dist_clusters, outfolder)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- getLDclusters(LDsInfo,ld_threshold, cls_count = 3)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
haplotypes
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
for (cls_snp in names(t_test_snpComp)) {
HaploTraitR::plotHapCombBoxPlot(cls_snp, SNPcombTables, t_test_snpComp, outfolder= outfolder)
ggplot2::ggsave(file.path(outfolder, paste0(cls_snp, "_boxplot.png")), width = 8, height = 6)
}
lDplots<-plotLDForClusters(ld_matrix_folder=LDsInfo[[1]], clusterLDs, outfolder=outfolder)
LDCombs<-plotLDCombMatrix(LDsInfo[[1]], clusterLDs, haplotypes, gwas, outfolder=outfolder)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value for two SNPs to be in LD
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
## New addition
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value for two SNPs to be in LD
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
## New addition
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
dist_clusters <- getDistClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, dist_clusters, outfolder)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- getLDclusters(LDsInfo,ld_threshold, cls_count = 3)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
haplotypes
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
for (cls_snp in names(t_test_snpComp)) {
HaploTraitR::plotHapCombBoxPlot(cls_snp, SNPcombTables, t_test_snpComp, outfolder= outfolder)
ggplot2::ggsave(file.path(outfolder, paste0(cls_snp, "_LD_boxplot.png")), width = 8, height = 6)
}
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value for two SNPs to be in LD
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
## New addition
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
dist_clusters <- getDistClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, dist_clusters, outfolder)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- getLDclusters(LDsInfo,ld_threshold, cls_count = 3)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
for (cls_snp in names(t_test_snpComp)) {
HaploTraitR::plotHapCombBoxPlot(cls_snp, SNPcombTables, t_test_snpComp, outfolder= outfolder)
ggplot2::ggsave(file.path(outfolder, paste0(cls_snp, "_LD_boxplot.png")), width = 8, height = 6)
}
lDplots<-plotLDForClusters(ld_matrix_folder=LDsInfo[[1]], clusterLDs, outfolder=outfolder)
LDCombs<-plotLDCombMatrix(LDsInfo[[1]], clusterLDs, haplotypes, gwas, outfolder=outfolder)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value for two SNPs to be in LD
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
## New addition
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
dist_clusters <- getDistClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, dist_clusters, outfolder)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- getLDclusters(LDsInfo,ld_threshold, cls_count = 3)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
for (cls_snp in names(t_test_snpComp)) {
HaploTraitR::plotHapCombBoxPlot(cls_snp, SNPcombTables, t_test_snpComp, outfolder= outfolder)
ggplot2::ggsave(file.path(outfolder, paste0(cls_snp, "_LD_boxplot.png")), width = 8, height = 6)
}
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
haplotypes
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value for two SNPs to be in LD
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
## New addition
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
dist_clusters <- getDistClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, dist_clusters, outfolder)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- getLDclusters(LDsInfo,ld_threshold, cls_count = 3)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
for (cls_snp in names(t_test_snpComp)) {
HaploTraitR::plotHapCombBoxPlot(cls_snp, SNPcombTables, t_test_snpComp, outfolder= outfolder)
ggplot2::ggsave(file.path(outfolder, paste0(cls_snp, "_LD_boxplot.png")), width = 8, height = 6)
}
lDplots<-plotLDForClusters(ld_matrix_folder=LDsInfo[[1]], clusterLDs, outfolder=outfolder)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value for two SNPs to be in LD
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
## New addition
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
dist_clusters <- getDistClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, dist_clusters, outfolder)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- getLDclusters(LDsInfo,ld_threshold, cls_count = 3)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
for (cls_snp in names(t_test_snpComp)) {
HaploTraitR::plotHapCombBoxPlot(cls_snp, SNPcombTables, t_test_snpComp, outfolder= outfolder)
ggplot2::ggsave(file.path(outfolder, paste0(cls_snp, "_LD_boxplot.png")), width = 8, height = 6)
}
lDplots<-plotLDForClusters(ld_matrix_folder=LDsInfo[[1]], clusterLDs, outfolder=outfolder)
# save to  a folder
write.csv(LD_matrix_melted, "LD_matrix_melted.csv")
for (cls_snp in names(t_test_snpComp)) {
HaploTraitR::plotHapCombBoxPlot(cls_snp, SNPcombTables, t_test_snpComp, outfolder= outfolder)
ggplot2::ggsave(file.path(outfolder, paste0(cls_snp, "_LD_boxplot.png")), width = 8, height = 6)
}
sessionInfo()
for (cls_snp in names(t_test_snpComp)) {
HaploTraitR::plotHapCombBoxPlot(cls_snp, SNPcombTables, t_test_snpComp, outfolder= outfolder)
ggplot2::ggsave(file.path(outfolder, paste0(cls_snp, "_LD_boxplot.png")), width = 8, height = 6)
}
lDplots<-plotLDForClusters(ld_matrix_folder=LDsInfo[[1]], clusterLDs, outfolder=outfolder)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value for two SNPs to be in LD
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
hapmap <- readHapmap(hapfile)
## New addition
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
# select sig SNPs
subhapmap<-extract_hapmap(hapmap, gwas)
# get pheno and geno
geno_pheno<-get_pheno_geno(subhapmap, pheno)
# plot the boxplot
boxplot_geno_pheno(geno_pheno, outfolder)
dist_clusters <- getDistClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, dist_clusters, outfolder)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- getLDclusters(LDsInfo,ld_threshold, cls_count = 3)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <-  HaploTraitR::testSNPcombs(SNPcombTables)
for (cls_snp in names(t_test_snpComp)) {
HaploTraitR::plotHapCombBoxPlot(cls_snp, SNPcombTables, t_test_snpComp, outfolder= outfolder)
ggplot2::ggsave(file.path(outfolder, paste0(cls_snp, "_LD_boxplot.png")), width = 8, height = 6)
}
lDplots<-plotLDForClusters(ld_matrix_folder=LDsInfo[[1]], clusterLDs, outfolder=outfolder)
### Plot Haplotype Distribution
library(ggplot2)
lDplots<-plotLDForClusters(ld_matrix_folder=LDsInfo[[1]], clusterLDs, outfolder=outfolder)
