# Step 8: Generate SNP Combination Tables
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
# Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <- HaploTraitR::testSNPcombs(SNPcombTables)
# Step 10: Generate and Save Haplotype Combination Boxplots
generateHapCombBoxPlots(SNPcombTables, t_test_snpComp)
pheno
# Step 11: Plot Haplotype Distribution
lDplots <- plotLDForClusters(clusterLDs)
# Just to be sure that we are starting from a clean environment
rm(list = ls())
# Load HaploTraitR package
library(HaploTraitR)
# Step 0: Reset configuration
HaploTraitR::reset_config()
# You can change other configuration parameters using the set_config function use list_config
list_config()
phenotyepe<-"Area"
phenotyepe_unit<-"cm2"
# Read Phenotype data
set_config(config = list(phenotypename = phenotyepe,
phenotypeunit = NULL,
pheno_col = phenotyepe,
phenotypeunit = phenotyepe_unit))
# Just to be sure that we are starting from a clean environment
rm(list = ls())
# Load HaploTraitR package
library(HaploTraitR)
# Step 0: Reset configuration
HaploTraitR::reset_config()
# You can change other configuration parameters using the set_config function use list_config
list_config()
phenotyepe<-"Area"
phenotyepe_unit<-"cm2"
# Read Phenotype data
set_config(config = list(phenotypename = phenotyepe,
phenotypeunit = NULL,
pheno_col = phenotyepe,
phenotypeunit = phenotyepe_unit))
# Step 1: Create a unique output folder for results
result_folder <- create_unique_result_folder(location = "sampleout")
set_config(config = list(outfolder = result_folder))
# Read GWAS data
gwas <- read_gwas_file(gwasfile, sep = ",")
# read hapmap data
hapmap <- readHapmap(hapmap_file)
# Step 2: Read Data Files
gwasfile <- "sampledata/gwas_area_ann19.csv"
hapmap_file <- "sampledata/Barley_50K.txt"
phenofile <- "sampledata/area_ann19.tsv"
# Read GWAS data
gwas <- read_gwas_file(gwasfile, sep = ",")
# read hapmap data
hapmap <- readHapmap(hapmap_file)
# read phenotype data
pheno <- read.csv(phenofile, sep = "\t", header = TRUE)
# create data usethis::use_data(gwas, hapmap, pheno)
usethis::use_data(gwas, hapmap, pheno)
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
gwas_filtered
# se fdr to 0.1 for this example
set_config(config = list(fdr_threshold = 0.1))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
gwas_filtered
# se fdr to 0.1 for this example
set_config(config = list(fdr_threshold = 1))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
gwas_filtered
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
# se fdr to 0.1 for this example
set_config(config = list(fdr_threshold = 0.9))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
gwas_filtered
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
# se fdr to 0.1 for this example
set_config(config = list(fdr_threshold = 0.5))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
gwas_filtered
gwas_filtered
gwas_filtered
# se fdr to 0.5 for this example
set_config(config = list(fdr_threshold = 0.2))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
gwas_filtered
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
# se fdr to 0.5 for this example
set_config(config = list(fdr_threshold = 0.3))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
gwas_filtered
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
gwas_filtered
names(gwas_filtered)
# se fdr to 0.5 for this example
set_config(config = list(fdr_threshold = 0.3))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
names(gwas_filtered)
# Read GWAS data
gwas <- read_gwas_file(gwasfile, sep = ",")
gwas_filtered
gwas
# Read GWAS data
gwas <- read_gwas_file(gwasfile, sep = ",")
gwas
# read hapmap data
hapmap <- readHapmap(hapmap_file)
# read phenotype data
pheno <- read.csv(phenofile, sep = "\t", header = TRUE)
# create data usethis::use_data(gwas, hapmap, pheno)
usethis::use_data(gwas, hapmap, pheno)
# create data usethis::use_data(gwas, hapmap, pheno)
usethis::use_data(gwas, hapmap, pheno, overwrite = TRUE)
gwas
names(gwas)
# Read GWAS data
gwas <- read_gwas_file(gwasfile, sep = ",")
names(gwas)
# se fdr to 0.5 for this example
set_config(config = list(fdr_threshold = 0.3))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
names(gwas_filtered)
gwas_filtered
# Just to be sure that we are starting from a clean environment
rm(list = ls())
# Load HaploTraitR package
library(HaploTraitR)
# Step 0: Reset configuration
HaploTraitR::reset_config()
# You can change other configuration parameters using the set_config function use list_config
list_config()
phenotyepe<-"Area"
phenotyepe_unit<-"cm2"
# Read Phenotype data
set_config(config = list(phenotypename = phenotyepe,
phenotypeunit = NULL,
pheno_col = phenotyepe,
phenotypeunit = phenotyepe_unit))
# Step 1: Create a unique output folder for results
result_folder <- create_unique_result_folder(location = "sampleout")
set_config(config = list(outfolder = result_folder))
# Step 2: Read Data Files
gwasfile <- "sampledata/gwas_area_ann19.csv"
hapmap_file <- "sampledata/Barley_50K.txt"
phenofile <- "sampledata/area_ann19.tsv"
hapmap_file <- "sampledata/Barley_50K.tsv"
phenofile <- "sampledata/area_ann19.tsv"
# Read GWAS data
gwas <- read_gwas_file(gwasfile, sep = ",")
names(gwas)
# read hapmap data
hapmap <- readHapmap(hapmap_file)
# read phenotype data
pheno <- read.csv(phenofile, sep = "\t", header = TRUE)
# create data usethis::use_data(gwas, hapmap, pheno)
usethis::use_data(gwas, hapmap, pheno, overwrite = TRUE)
# se fdr to 0.5 for this example
set_config(config = list(fdr_threshold = 0.3))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
names(gwas_filtered)
gwas_filtered
# Step 3: Generate Boxplots for Genotype-Phenotype Distribution
bxplts <- boxplot_genotype_phenotype(pheno, gwas_filtered, hapmap)
# se fdr to 0.5 for this example
set_config(config = list(fdr_threshold = 0.2))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
names(gwas_filtered)
gwas_filtered
# Step 3: Generate Boxplots for Genotype-Phenotype Distribution
bxplts <- boxplot_genotype_phenotype(pheno, gwas_filtered, hapmap)
# Step 3: Generate Boxplots for Genotype-Phenotype Distribution
bxplts <- boxplot_genotype_phenotype(pheno, gwas_filtered, hapmap)
# Step 4: Cluster SNPs by Chromosome
dist_clusters <- getDistClusters(gwas_filtered, hapmap)
# Step 5: Compute LD Matrices
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
# Step 6: Cluster LD Values and Convert to Haplotypes
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
# Step 7: Get Sample Haplotypes and Save
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
# Step 8: Generate SNP Combination Tables
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
# Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <- HaploTraitR::testSNPcombs(SNPcombTables)
# Step 10: Generate and Save Haplotype Combination Boxplots
generateHapCombBoxPlots(SNPcombTables, t_test_snpComp)
# Step 11: Plot Haplotype Distribution
lDplots <- plotLDForClusters(clusterLDs)
# Step 12: Plot LD Combination Matrix with LD
LDCombs <- plotLDCombMatrix(clusterLDs, haplotypes, gwas_filtered)
# Step 13: plot haplotypes on the genome
plot_haplotypes_genome(gwas, haplotypes)
# create example data
barley_area<-list()
barley_area$gwas<-gwas
barley_area$gwas<-gwas
barley_area$hapmap<-hapmap
barley_area$pheno<-pheno
# create data usethis::use_data(gwas, hapmap, pheno)
usethis::use_data(barley_area, overwrite = TRUE)
# 2 load the data
data(barley_area, package = "HaploTraitR")
# 2 load the data
data("barley_area", package = "HaploTraitR")
# Or you can use the data provided in the package
# data("barley_area", package = "HaploTraitR")
gwas <- barley_area$gwas
hapmap <- barley_area$hapmap
pheno <- barley_area$pheno
# Just to be sure that we are starting from a clean environment
rm(list = ls())
# Load HaploTraitR package
library(HaploTraitR)
# Step 0: Reset configuration
HaploTraitR::reset_config()
# You can change other configuration parameters using the set_config function use list_config
list_config()
phenotyepe<-"Area"
phenotyepe_unit<-"cm2"
# Read Phenotype data
set_config(config = list(phenotypename = phenotyepe,
phenotypeunit = NULL,
pheno_col = phenotyepe,
phenotypeunit = phenotyepe_unit))
# Step 1: Create a unique output folder for results
result_folder <- create_unique_result_folder(location = "sampleout")
set_config(config = list(outfolder = result_folder))
# Step 2: Read Data Files
gwasfile <- "sampledata/gwas_area_ann19.csv"
hapmap_file <- "sampledata/Barley_50K.tsv"
phenofile <- "sampledata/area_ann19.tsv"
# Read GWAS data
gwas <- read_gwas_file(gwasfile, sep = ",")
# Read hapmap data
hapmap <- readHapmap(hapmap_file)
# Read phenotype data
pheno <- read.csv(phenofile, sep = "\t", header = TRUE)
# se fdr to 0.5 for this example
set_config(config = list(fdr_threshold = 0.2))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
names(gwas_filtered)
gwas_filtered
# Step 3: Generate Boxplots for Genotype-Phenotype Distribution
bxplts <- boxplot_genotype_phenotype(pheno, gwas_filtered, hapmap)
# Just to be sure that we are starting from a clean environment
rm(list = ls())
# Load HaploTraitR package
library(HaploTraitR)
# Step 0: Reset configuration
HaploTraitR::reset_config()
# You can change other configuration parameters using the set_config function use list_config
list_config()
phenotyepe<-"Area"
phenotyepe_unit<-"cm2"
# Read Phenotype data
set_config(config = list(phenotypename = phenotyepe,
phenotypeunit = NULL,
pheno_col = phenotyepe,
phenotypeunit = phenotyepe_unit))
# Step 1: Create a unique output folder for results
result_folder <- create_unique_result_folder(location = "sampleout")
set_config(config = list(outfolder = result_folder))
# Step 2: Read Data Files
gwasfile <- "sampledata/gwas_area_ann19.csv"
hapmap_file <- "sampledata/Barley_50K.tsv"
phenofile <- "sampledata/area_ann19.tsv"
# Read GWAS data
gwas <- read_gwas_file(gwasfile, sep = ",")
# Read hapmap data
hapmap <- readHapmap(hapmap_file)
# Read phenotype data
pheno <- read.csv(phenofile, sep = "\t", header = TRUE)
# se fdr to 0.5 for this example
set_config(config = list(fdr_threshold = 0.2))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
names(gwas_filtered)
gwas_filtered
# Step 3: Generate Boxplots for Genotype-Phenotype Distribution
bxplts <- boxplot_genotype_phenotype(pheno, gwas_filtered, hapmap)
# Step 4: Cluster SNPs by Chromosome
dist_clusters <- getDistClusters(gwas_filtered, hapmap)
# Step 5: Compute LD Matrices
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
# Step 6: Cluster LD Values and Convert to Haplotypes
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
# Step 7: Get Sample Haplotypes and Save
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
# Step 8: Generate SNP Combination Tables
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
# Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <- HaploTraitR::testSNPcombs(SNPcombTables)
# Step 10: Generate and Save Haplotype Combination Boxplots
generateHapCombBoxPlots(SNPcombTables, t_test_snpComp)
# Step 12: Plot LD Combination Matrix with LD
LDCombs <- plotLDCombMatrix(clusterLDs, haplotypes, gwas_filtered)
# se fdr to 0.5 for this example
set_config(config = list(fdr_threshold = 0.1))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
names(gwas_filtered)
gwas_filtered
# Step 3: Generate Boxplots for Genotype-Phenotype Distribution
bxplts <- boxplot_genotype_phenotype(pheno, gwas_filtered, hapmap)
# Step 4: Cluster SNPs by Chromosome
dist_clusters <- getDistClusters(gwas_filtered, hapmap)
# Step 5: Compute LD Matrices
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
# Step 6: Cluster LD Values and Convert to Haplotypes
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
# Step 7: Get Sample Haplotypes and Save
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
# Step 8: Generate SNP Combination Tables
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
# Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <- HaploTraitR::testSNPcombs(SNPcombTables)
# Step 10: Generate and Save Haplotype Combination Boxplots
generateHapCombBoxPlots(SNPcombTables, t_test_snpComp)
# Step 12: Plot LD Combination Matrix with LD
LDCombs <- plotLDCombMatrix(clusterLDs, haplotypes, gwas_filtered)
# Just to be sure that we are starting from a clean environment
rm(list = ls())
# Load HaploTraitR package
library(HaploTraitR)
# Step 0: Reset configuration
HaploTraitR::reset_config()
# You can change other configuration parameters using the set_config function use list_config
list_config()
phenotyepe<-"Area"
phenotyepe_unit<-"cm2"
# Read Phenotype data
set_config(config = list(phenotypename = phenotyepe,
phenotypeunit = NULL,
pheno_col = phenotyepe,
phenotypeunit = phenotyepe_unit))
# Step 1: Create a unique output folder for results
result_folder <- create_unique_result_folder(location = "sampleout")
set_config(config = list(outfolder = result_folder))
# Step 2: Read Data Files
gwasfile <- "sampledata/gwas_area_ann19.csv"
hapmap_file <- "sampledata/Barley_50K.tsv"
phenofile <- "sampledata/area_ann19.tsv"
# Read GWAS data
gwas <- read_gwas_file(gwasfile, sep = ",")
# Read hapmap data
hapmap <- readHapmap(hapmap_file)
# Read phenotype data
pheno <- read.csv(phenofile, sep = "\t", header = TRUE)
# se fdr to 0.5 for this example
set_config(config = list(fdr_threshold = 0.1))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
names(gwas_filtered)
gwas_filtered
# Step 3: Generate Boxplots for Genotype-Phenotype Distribution
bxplts <- boxplot_genotype_phenotype(pheno, gwas_filtered, hapmap)
# Step 4: Cluster SNPs by Chromosome
dist_clusters <- getDistClusters(gwas_filtered, hapmap)
# Step 5: Compute LD Matrices
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
# Step 6: Cluster LD Values and Convert to Haplotypes
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
# Step 7: Get Sample Haplotypes and Save
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
# Step 8: Generate SNP Combination Tables
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
# Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <- HaploTraitR::testSNPcombs(SNPcombTables)
# Step 10: Generate and Save Haplotype Combination Boxplots
generateHapCombBoxPlots(SNPcombTables, t_test_snpComp)
# Just to be sure that we are starting from a clean environment
rm(list = ls())
# Load HaploTraitR package
library(HaploTraitR)
# Step 0: Reset configuration
HaploTraitR::reset_config()
# You can change other configuration parameters using the set_config function use list_config
list_config()
phenotyepe<-"Area"
phenotyepe_unit<-"cm2"
# Read Phenotype data
set_config(config = list(phenotypename = phenotyepe,
phenotypeunit = NULL,
pheno_col = phenotyepe,
phenotypeunit = phenotyepe_unit))
# Step 1: Create a unique output folder for results
result_folder <- create_unique_result_folder(location = "sampleout")
set_config(config = list(outfolder = result_folder))
# Step 2: Read Data Files
gwasfile <- "sampledata/gwas_area_ann19.csv"
# Just to be sure that we are starting from a clean environment
rm(list = ls())
# Load HaploTraitR package
library(HaploTraitR)
# Step 0: Reset configuration
HaploTraitR::reset_config()
# You can change other configuration parameters using the set_config function use list_config
list_config()
phenotyepe<-"Area"
phenotyepe_unit<-"cm2"
# Read Phenotype data
set_config(config = list(phenotypename = phenotyepe,
phenotypeunit = NULL,
pheno_col = phenotyepe,
phenotypeunit = phenotyepe_unit))
# Step 1: Create a unique output folder for results
result_folder <- create_unique_result_folder(location = "sampleout")
set_config(config = list(outfolder = result_folder))
# Step 2: Read Data Files
gwasfile <- "sampledata/gwas_area_ann19.csv"
hapmap_file <- "sampledata/Barley_50K.tsv"
phenofile <- "sampledata/area_ann19.tsv"
# Read GWAS data
gwas <- read_gwas_file(gwasfile, sep = ",")
# Read hapmap data
hapmap <- readHapmap(hapmap_file)
# Read phenotype data
pheno <- read.csv(phenofile, sep = "\t", header = TRUE)
# se fdr to 0.5 for this example
set_config(config = list(fdr_threshold = 0.1))
# Filter GWAS data by FDR threshold, change the threshold if needed from the configuration
gwas_filtered <- filter_gwas_data(gwas)
names(gwas_filtered)
gwas_filtered
# Step 3: Generate Boxplots for Genotype-Phenotype Distribution
bxplts <- boxplot_genotype_phenotype(pheno, gwas_filtered, hapmap)
# Step 4: Cluster SNPs by Chromosome
dist_clusters <- getDistClusters(gwas_filtered, hapmap)
# Step 5: Compute LD Matrices
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
# Step 6: Cluster LD Values and Convert to Haplotypes
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
# Step 7: Get Sample Haplotypes and Save
snpcombsample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
# Step 8: Generate SNP Combination Tables
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
# Step 9: Perform t-tests on SNP Combinations
t_test_snpComp <- HaploTraitR::testSNPcombs(SNPcombTables)
# Step 10: Generate and Save Haplotype Combination Boxplots
generateHapCombBoxPlots(SNPcombTables, t_test_snpComp)
LDCombs <- plotLDCombMatrix(clusterLDs, haplotypes, gwas_filtered)
# note: for huge number of SNPs, the plot may not be clear or raise an error
# Step 13: plot haplotypes on the genome
plot_haplotypes_genome(gwas, haplotypes)
library(HaploTraitR)
# Step 0: Reset configuration
HaploTraitR::reset_config()
# Step 0.2: Set the phenotype information
phenotype <- "Area"
phenotype_unit <- "cm2"
set_config(config = list(phenotypename = phenotype,
pheno_col = phenotype,
phenotypeunit = phenotype_unit))
# Step 1: Create a unique output folder for results
result_folder <- create_unique_result_folder(location = "sampleout")
set_config(config = list(outfolder = result_folder))
# Step 2: Read Data Files
gwas_file <- "sampledata/gwas_area_ann19.csv"
hapmap_file <- "sampledata/Barley_50K.tsv"
pheno_file <- "sampledata/area_ann19.tsv"
# Read GWAS data
gwas <- read_gwas_file(gwas_file, sep = ",")
# Read hapmap data
hapmap <- readHapmap(hapmap_file)
# Read phenotype data
pheno <- read.csv(pheno_file, sep = "\t", header = TRUE)
# Step 3: Set FDR threshold and filter GWAS data
set_config(config = list(fdr_threshold = 0.1))
gwas_filtered <- filter_gwas_data(gwas)
print(names(gwas_filtered))
print(gwas_filtered)
# Step 4: Generate Boxplots for Genotype-Phenotype Distribution
bxplts <- boxplot_genotype_phenotype(pheno, gwas_filtered, hapmap)
# Step 5: Cluster SNPs by Chromosome
dist_clusters <- getDistClusters(gwas_filtered, hapmap)
# Step 6: Compute LD Matrices
LDsInfo <- computeLDclusters(hapmap, dist_clusters)
# Step 7: Cluster LD Values and Convert to Haplotypes
clusterLDs <- getLDclusters(LDsInfo)
haplotypes <- HaploTraitR::convertLDclusters2Haps(hapmap, clusterLDs)
# Step 8: Get Sample Haplotypes and Save
snpcomb_sample <- HaploTraitR::getHapCombSamples(haplotypes, hapmap)
# Step 9: Generate SNP Combination Tables
SNPcombTables <- getSNPcombTables(snpcomb_sample, pheno)
# Step 10: Perform t-tests on SNP Combinations
t_test_snpComp <- HaploTraitR::testSNPcombs(SNPcombTables)
# Step 11: Generate and Save Haplotype Combination Boxplots
generateHapCombBoxPlots(SNPcombTables, t_test_snpComp)
# Step 13: Plot LD Combination Matrix with LD
LDCombs <- plotLDCombMatrix(clusterLDs, haplotypes, gwas_filtered)
# Step 14: Plot Haplotypes on the Genome
plot_haplotypes_genome(gwas, haplotypes)
