snps <- names(comb_sample_Tables)
hap_comb_tests <- list()
snps
snps <- names(comb_sample_Tables)
hap_comb_tests <- list()
snpadded<-c()
for (snp in snps) {
# Initialize comb_sample as a data frame with specified column types
comb_sample <- comb_sample_Tables[[snp]]
# Convert "Comb" to factor
comb_sample$Comb <- factor(comb_sample$Comb)
# Perform statistical test if there are enough samples
tryCatch({
# Ensure there are at least two levels in "Comb" and sufficient data for testing
if (length(unique(comb_sample$Comb)) > 1 && nrow(comb_sample) > 2) {
stat.test <- comb_sample %>% t_test(Pheno ~ Comb)
stat.test <- stat.test %>% add_xy_position(x = "Pheno")
# Set xmin and xmax based on the group1 and group2 column values
stat.test <- stat.test %>%
mutate(xmin = as.numeric(factor(group1, levels = levels(comb_sample$Comb))),
xmax = as.numeric(factor(group2, levels = levels(comb_sample$Comb))))
stat.test$snp <- snp
if (nrow(stat.test) > 0) {
hap_comb_tests <- append(hap_comb_tests, list(stat.test))
snpadded<-append(snpadded, snp)
}
}
}, error = function(e) {
message(paste("Error in SNP", snp, ": ", e$message))
})
}
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
for (snp in snps) {
# Initialize comb_sample as a data frame with specified column types
comb_sample <- comb_sample_Tables[[snp]]
# Convert "Comb" to factor
comb_sample$Comb <- factor(comb_sample$Comb)
# Perform statistical test if there are enough samples
tryCatch({
# Ensure there are at least two levels in "Comb" and sufficient data for testing
if (length(unique(comb_sample$Comb)) > 1 && nrow(comb_sample) > 2) {
stat.test <- comb_sample %>% t_test(Pheno ~ Comb)
stat.test <- stat.test %>% add_xy_position(x = "Pheno")
# Set xmin and xmax based on the group1 and group2 column values
stat.test <- stat.test %>%
mutate(xmin = as.numeric(factor(group1, levels = levels(comb_sample$Comb))),
xmax = as.numeric(factor(group2, levels = levels(comb_sample$Comb))))
stat.test$snp <- snp
if (nrow(stat.test) > 0) {
hap_comb_tests <- append(hap_comb_tests, list(stat.test))
snpadded<-append(snpadded, snp)
}
}
}, error = function(e) {
message(paste("Error in SNP", snp, ": ", e$message))
})
}
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp
for (snp in snps) {
# Initialize comb_sample as a data frame with specified column types
comb_sample <- comb_sample_Tables[[snp]]
# Convert "Comb" to factor
comb_sample$Comb <- factor(comb_sample$Comb)
# Perform statistical test if there are enough samples
tryCatch({
# Ensure there are at least two levels in "Comb" and sufficient data for testing
if (length(unique(comb_sample$Comb)) > 1 && nrow(comb_sample) > 2) {
stat.test <- comb_sample %>% t_test(Pheno ~ Comb)
stat.test <- stat.test %>% add_xy_position(x = "Pheno")
# Set xmin and xmax based on the group1 and group2 column values
stat.test <- stat.test %>%
mutate(xmin = as.numeric(factor(group1, levels = levels(comb_sample$Comb))),
xmax = as.numeric(factor(group2, levels = levels(comb_sample$Comb))))
stat.test$snp <- snp
if (nrow(stat.test) > 0) {
hap_comb_tests <- append(hap_comb_tests, list(stat.test))
snpadded<-append(snpadded, snp)
}
}
}, error = function(e) {
message(paste("Error in SNP", snp, ": ", e$message))
})
}
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
#' Calculate the p-value for a SNP combinations
#' @param comb_sample_Tables A list of sample tables for each SNP combination
#' @return A data frame with the p-values for the SNP combinations
#' @importFrom magrittr %>%
#' @export
testSNPcombs <- function(comb_sample_Tables) {
snps <- names(comb_sample_Tables)
hap_comb_tests <- list()
snpadded<-c()
for (snp in snps) {
# Initialize comb_sample as a data frame with specified column types
comb_sample <- comb_sample_Tables[[snp]]
# Convert "Comb" to factor
comb_sample$Comb <- factor(comb_sample$Comb)
# Perform statistical test if there are enough samples
tryCatch({
# Ensure there are at least two levels in "Comb" and sufficient data for testing
if (length(unique(comb_sample$Comb)) > 1 && nrow(comb_sample) > 2) {
stat.test <- comb_sample %>% t_test(Pheno ~ Comb)
stat.test <- stat.test %>% add_xy_position(x = "Pheno")
# Set xmin and xmax based on the group1 and group2 column values
stat.test <- stat.test %>%
mutate(xmin = as.numeric(factor(group1, levels = levels(comb_sample$Comb))),
xmax = as.numeric(factor(group2, levels = levels(comb_sample$Comb))))
stat.test$snp <- snp
if (nrow(stat.test) > 0) {
hap_comb_tests <- append(hap_comb_tests, list(stat.test))
snpadded<-append(snpadded, snp)
}
}
}, error = function(e) {
message(paste("Error in SNP", snp, ": ", e$message))
})
}
names(hap_comb_tests) <- snpadded
return(hap_comb_tests)
}
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
library(dplyr)
t_test_snpComp <- testSNPcombs(SNPcombTables)
library(magrittr)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
library(dplyr)
t_test_snpComp <- testSNPcombs(SNPcombTables)
library(rstatix)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
head(gwas)
hapmap <- readHapmap(hapfile)
head(hapmap)
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, haplotype_clusters)
head(LDsInfo)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- clusterLD(LDsInfo, ld_threshold, cls_count = 3)
haplotypes <- convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
head(haplotypes)
snpcombsample <- getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
head(pheno)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
head(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
# I am going to fix this
library(magrittr)
library(rstatix)
#The target code
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
library(ggplot2)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
#library(ggplot2)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
#library(ggplot2)
library(ggpubr)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
plotHapCombDistribution(snp, SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
plotHapCombDistribution(snp, SNPcombTables)
plotHapCombDistribution(snp, SNPcombTables)
plotHapCombDistribution(snp, SNPcombTables)
plotHapCombDistribution(snp, SNPcombTables)
library(ggplot2)
library(dplyr)  # If you are also using %>%
plotHapCombDistribution(snp, SNPcombTables)
#library(ggplot2)
library(ggpubr)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
ggsave(file.path(outfolder, paste0(snp, "_boxplot.png")), width = 8, height = 6)
library(ggplot2)
library(dplyr)  # If you are also using %>%
plotHapCombDistribution(snp, SNPcombTables)
ggsave(file.path(outfolder, paste0(snp, "_distribution.png")), width = 8, height = 6)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
head(gwas)
hapmap <- readHapmap(hapfile)
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, haplotype_clusters)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- clusterLD(LDsInfo, ld_threshold, cls_count = 3)
haplotypes <- convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
snpcombsample <- getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
head(pheno)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
# I am going to fix this
#library(magrittr)
#library(rstatix)
#The target code
t_test_snpComp <- testSNPcombs(SNPcombTables)
devtools::load_all(".")
`rm(list = c("convertLDclusters2Haps", "getHapCombSamples", "plotHapCombBoxPlot", "testSNPcombs"))
rm(list = c("convertLDclusters2Haps", "getHapCombSamples", "plotHapCombBoxPlot", "testSNPcombs"))
s
s
rm(list = c("convertLDclusters2Haps", "getHapCombSamples", "plotHapCombBoxPlot", "testSNPcombs"))
# I am going to fix this
#library(magrittr)
#library(rstatix)
#The target code
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
# I am going to fix this
#library(magrittr)
#library(rstatix)
#The target code
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
# I am going to fix this
#library(magrittr)
#library(rstatix)
#The target code
t_test_snpComp <- testSNPcombs(SNPcombTables)
# I am going to fix this
#library(magrittr)
#library(rstatix)
#The target code
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
#library(ggplot2)
#library(ggpubr)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
#library(ggplot2)
#library(ggpubr)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
#library(ggplot2)
#library(ggpubr)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
#library(ggplot2)
#library(ggpubr)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
ggsave(file.path(outfolder, paste0(snp, "_boxplot.png")), width = 8, height = 6)
#library(ggplot2)
#library(ggpubr)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
ggsave(file.path(outfolder, paste0(snp, "_boxplot.png")), width = 8, height = 6)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
#library(ggplot2)
#library(ggpubr)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
ggplot2::ggsave(file.path(outfolder, paste0(snp, "_boxplot.png")), width = 8, height = 6)
library(ggplot2)
library(dplyr)  # If you are also using %>%
plotHapCombDistribution(snp, SNPcombTables)
ggsave(file.path(outfolder, paste0(snp, "_distribution.png")), width = 8, height = 6)
plotHapCombDistribution(snp, SNPcombTables)
ggplot2::ggsave(file.path(outfolder, paste0(snp, "_distribution.png")), width = 8, height = 6)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
head(gwas)
hapmap <- readHapmap(hapfile)
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, haplotype_clusters)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- clusterLD(LDsInfo, ld_threshold, cls_count = 3)
haplotypes <- convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
snpcombsample <- getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
head(pheno)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
head(gwas)
hapmap <- readHapmap(hapfile)
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, haplotype_clusters)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- clusterLD(LDsInfo, ld_threshold, cls_count = 3)
haplotypes <- convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
snpcombsample <- getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
head(pheno)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
devtools::document()
devtools::install()
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
head(gwas)
hapmap <- readHapmap(hapfile)
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, haplotype_clusters)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- clusterLD(LDsInfo, ld_threshold, cls_count = 3)
haplotypes <- convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
snpcombsample <- getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
head(pheno)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
usethis::use_pipe()
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
usethis::use_pipe()
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
