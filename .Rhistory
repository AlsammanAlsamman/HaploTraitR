angle_col = 45,
# do not cluster rows
cluster_cols = FALSE)
ggplot(comb_sample, aes(x = Pheno, fill = Comb)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(title = paste("Phenotype Distribution by Haplotype Combination for SNP", snp),
x = "Phenotype Value",
y = "Density")
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
ggplot(comb_sample, aes(x = Pheno, fill = Comb)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(title = paste("Phenotype Distribution by Haplotype Combination for SNP", snp),
x = "Phenotype Value",
y = "Density")
plotHapCombDistribution(snp, SNPcombTables)
SNPcombTables
###############
# merge the haplotype combinations
SNPcombTablesCombined<-lapply(SNPcombTables, function(x) {
x$SNP<-rownames(x)
x
})
SNPcombTablesCombined
###############
# merge the haplotype combinations
SNPcombTablesCombined<-lapply(SNPcombTables, function(x) {
x$SNP<-rownames(x)
x
})
plotHapCombDistribution
SNPcombTablesCombined
SNPcombTablesCombined
SNPcombTablesCombined<-do.call(rbind, SNPcombTablesCombined)
SNPcombTablesCombined
###############
# merge the haplotype combinations
SNPcombTablesCombined<-lapply(SNPcombTables, function(x) {
x$SNP<-rownames(x)
x
})
SNPcombTablesCombined<-do.call(rbind, SNPcombTablesCombined)
SNPcombTablesCombined
###############
# merge the haplotype combinations
# add SNP as a column
snpcombsample$SNP<-sapply(rownames(snpcombsample), function(x) strsplit(x, "_")[[1]][1])
snpcombsample
###############
# merge the haplotype combinations
# add SNP as a column
SNPcombTables<-lapply(SNPcombTables, function(x) {x$SNP<-snp; return(x)})
SNPcombTables
# merge the tables
SNPcombTables<-do.call(rbind, SNPcombTables)
ggplot(SNPcombTables, aes(x=SNP, y=mean, fill=Pheno)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
# plot the boxplot of the snp haplotype combinations
SNPcombTables
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=Pheno)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=SNP)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
# plot the boxplot of the snp haplotype combinations
SNPcombTables
SNPcombTables<-getSNPcombTables(snpcombsample, pheno)
SNPcombTables
###############
# merge the haplotype combinations
# add SNP as a column
for(i in 1:length(SNPcombTables))
{
SNPcombTables[[i]]$SNP<-names(SNPcombTables)[i]
}
# merge the tables
SNPcombTables<-do.call(rbind, SNPcombTables)
# plot the boxplot of the snp haplotype combinations
SNPcombTables
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=SNP)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=mean(Pheno))
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=mean(Pheno))+
ggplot(SNPcombTables, aes(x=SNP, y=Pheno, fill=mean(Pheno)))+
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotype combinations", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb)
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb+SNP, scales="free_y")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb+SNP, scales="free")
ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb+SNP)
p<-ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb+SNP, scales="free")
ggsave(file=file.path(outfolder, "Haplotypes_boxplot.png"), p, width=10, height=10, units="in", dpi=300)
ggsave(file=file.path(outfolder, "Haplotypes_boxplot.pdf"), p, width=10, height=10, units="in", dpi=300)
ggsave(file=file.path(outfolder, "Haplotypes_boxplot.pdf"), p, width=30, height=30, units="in", dpi=300)
library(HaploTraitR)
hapfile<-"~/Documents/MyGitHub/HaploTraitR_related/sampleData/GWAS_Out/Barley_50K_KNNimp.hmp.txt"
gwasfile<-"~/Documents/MyGitHub/HaploTraitR_related/sampleData/sample_package_data/SignificantSNP_GWAS.csv"
phenofile<-"~/Documents/MyGitHub/HaploTraitR_related/sampleData/sample_package_data/Pheno_ANN19.tsv"
outfolder<-"~/Documents/MyGitHub/HaploTraitR_related/haploLDOut"
# threshold distance
dist_threshold<-1000000 # for staring clustering all SNPs within 1Mb of the significant SNPs
# dist_threshold
dist_cluster_count<-5 # The minimum number of SNPs in a cluster
# ld_threshold
ld_threshold<-0.3 # The minimum LD value to consider two SNPs in LD
# combination frequency threshold
comb_freq_threshold<-0.1 # The minimum genotypes with the same combination to consider the combination
# cluster the SNPs by Chr
gwas<-readGWAS(gwasfile,sep=",")
# haplotype file
hapmap<-readHapmap(hapfile)
# Call the function
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
# Compute the LD matrices
LDsInfo<-computeLDclusters(hapmap, haplotype_clusters)
# save to outfolder
saveLDs2folder(LDsInfo, outfolder)
clusterLDs<-clusterLD(LDsInfo, ld_threshold,cls_count=3)
haplotypes<-convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
haplotypes
snpcombsample<-getHapCombSamples(haplotypes, hapmap)
snpcombsample<-as.data.frame(snpcombsample)
# save the haplotype combinations
write.csv(snpcombsample, file=file.path(outfolder, "haplotype_combinations.csv"), row.names=FALSE)
# read the phenotype data
pheno<-read.csv(phenofile, header=TRUE, sep="\t")
SNPcombTables<-getSNPcombTables(snpcombsample, pheno)
t_test_snpComp<- testSNPcombs(SNPcombTables)
snp<-"2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
plotHapCombDistribution(snp, SNPcombTables)
###############
# merge the haplotype combinations
# add SNP as a column
for(i in 1:length(SNPcombTables))
{
SNPcombTables[[i]]$SNP<-names(SNPcombTables)[i]
}
# merge the tables
SNPcombTables<-do.call(rbind, SNPcombTables)
p<-ggplot(SNPcombTables, aes(x=SNP, y=Pheno))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title="Haplotypes", x="SNP", y="Mean Phenotype")+
facet_wrap(~Comb+SNP, scales="free")
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
# Define file paths and output folder
getwd()
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.csv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = ",")
gwasfile
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
gwasfile
gwas <- readGWAS(gwasfile, sep = ",")
gwasfile
gwas <- readGWAS(gwasfile, sep = ",")
gwas <- readGWAS(gwasfile, sep = "\t")
head(gwas)
hapmap <- readHapmap(hapfile)
head(hapmap)
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
head(haplotype_clusters)
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, haplotype_clusters)
head(LDsInfo)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- clusterLD(LDsInfo, ld_threshold, cls_count = 3)
haplotypes <- convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
head(haplotypes)
snpcombsample <- getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
head(pheno)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
head(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
head(t_test_snpComp)
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
head(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
head(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
SNPcombTables
comb_sample_Tables<-SNPcombTables
snps <- names(comb_sample_Tables)
hap_comb_tests <- list()
snps
snps <- names(comb_sample_Tables)
hap_comb_tests <- list()
snpadded<-c()
for (snp in snps) {
# Initialize comb_sample as a data frame with specified column types
comb_sample <- comb_sample_Tables[[snp]]
# Convert "Comb" to factor
comb_sample$Comb <- factor(comb_sample$Comb)
# Perform statistical test if there are enough samples
tryCatch({
# Ensure there are at least two levels in "Comb" and sufficient data for testing
if (length(unique(comb_sample$Comb)) > 1 && nrow(comb_sample) > 2) {
stat.test <- comb_sample %>% t_test(Pheno ~ Comb)
stat.test <- stat.test %>% add_xy_position(x = "Pheno")
# Set xmin and xmax based on the group1 and group2 column values
stat.test <- stat.test %>%
mutate(xmin = as.numeric(factor(group1, levels = levels(comb_sample$Comb))),
xmax = as.numeric(factor(group2, levels = levels(comb_sample$Comb))))
stat.test$snp <- snp
if (nrow(stat.test) > 0) {
hap_comb_tests <- append(hap_comb_tests, list(stat.test))
snpadded<-append(snpadded, snp)
}
}
}, error = function(e) {
message(paste("Error in SNP", snp, ": ", e$message))
})
}
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
for (snp in snps) {
# Initialize comb_sample as a data frame with specified column types
comb_sample <- comb_sample_Tables[[snp]]
# Convert "Comb" to factor
comb_sample$Comb <- factor(comb_sample$Comb)
# Perform statistical test if there are enough samples
tryCatch({
# Ensure there are at least two levels in "Comb" and sufficient data for testing
if (length(unique(comb_sample$Comb)) > 1 && nrow(comb_sample) > 2) {
stat.test <- comb_sample %>% t_test(Pheno ~ Comb)
stat.test <- stat.test %>% add_xy_position(x = "Pheno")
# Set xmin and xmax based on the group1 and group2 column values
stat.test <- stat.test %>%
mutate(xmin = as.numeric(factor(group1, levels = levels(comb_sample$Comb))),
xmax = as.numeric(factor(group2, levels = levels(comb_sample$Comb))))
stat.test$snp <- snp
if (nrow(stat.test) > 0) {
hap_comb_tests <- append(hap_comb_tests, list(stat.test))
snpadded<-append(snpadded, snp)
}
}
}, error = function(e) {
message(paste("Error in SNP", snp, ": ", e$message))
})
}
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp
for (snp in snps) {
# Initialize comb_sample as a data frame with specified column types
comb_sample <- comb_sample_Tables[[snp]]
# Convert "Comb" to factor
comb_sample$Comb <- factor(comb_sample$Comb)
# Perform statistical test if there are enough samples
tryCatch({
# Ensure there are at least two levels in "Comb" and sufficient data for testing
if (length(unique(comb_sample$Comb)) > 1 && nrow(comb_sample) > 2) {
stat.test <- comb_sample %>% t_test(Pheno ~ Comb)
stat.test <- stat.test %>% add_xy_position(x = "Pheno")
# Set xmin and xmax based on the group1 and group2 column values
stat.test <- stat.test %>%
mutate(xmin = as.numeric(factor(group1, levels = levels(comb_sample$Comb))),
xmax = as.numeric(factor(group2, levels = levels(comb_sample$Comb))))
stat.test$snp <- snp
if (nrow(stat.test) > 0) {
hap_comb_tests <- append(hap_comb_tests, list(stat.test))
snpadded<-append(snpadded, snp)
}
}
}, error = function(e) {
message(paste("Error in SNP", snp, ": ", e$message))
})
}
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
#' Calculate the p-value for a SNP combinations
#' @param comb_sample_Tables A list of sample tables for each SNP combination
#' @return A data frame with the p-values for the SNP combinations
#' @importFrom magrittr %>%
#' @export
testSNPcombs <- function(comb_sample_Tables) {
snps <- names(comb_sample_Tables)
hap_comb_tests <- list()
snpadded<-c()
for (snp in snps) {
# Initialize comb_sample as a data frame with specified column types
comb_sample <- comb_sample_Tables[[snp]]
# Convert "Comb" to factor
comb_sample$Comb <- factor(comb_sample$Comb)
# Perform statistical test if there are enough samples
tryCatch({
# Ensure there are at least two levels in "Comb" and sufficient data for testing
if (length(unique(comb_sample$Comb)) > 1 && nrow(comb_sample) > 2) {
stat.test <- comb_sample %>% t_test(Pheno ~ Comb)
stat.test <- stat.test %>% add_xy_position(x = "Pheno")
# Set xmin and xmax based on the group1 and group2 column values
stat.test <- stat.test %>%
mutate(xmin = as.numeric(factor(group1, levels = levels(comb_sample$Comb))),
xmax = as.numeric(factor(group2, levels = levels(comb_sample$Comb))))
stat.test$snp <- snp
if (nrow(stat.test) > 0) {
hap_comb_tests <- append(hap_comb_tests, list(stat.test))
snpadded<-append(snpadded, snp)
}
}
}, error = function(e) {
message(paste("Error in SNP", snp, ": ", e$message))
})
}
names(hap_comb_tests) <- snpadded
return(hap_comb_tests)
}
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
library(dplyr)
t_test_snpComp <- testSNPcombs(SNPcombTables)
library(magrittr)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
SNPcombTables
t_test_snpComp
t_test_snpComp
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
library(dplyr)
t_test_snpComp <- testSNPcombs(SNPcombTables)
library(rstatix)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
gwas <- readGWAS(gwasfile, sep = "\t")
head(gwas)
hapmap <- readHapmap(hapfile)
head(hapmap)
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, haplotype_clusters)
head(LDsInfo)
saveLDs2folder(LDsInfo, outfolder)
clusterLDs <- clusterLD(LDsInfo, ld_threshold, cls_count = 3)
haplotypes <- convertLDclusters2Haps(hapmap, clusterLDs, comb_freq_threshold)
head(haplotypes)
snpcombsample <- getHapCombSamples(haplotypes, hapmap)
snpcombsample <- as.data.frame(snpcombsample)
write.csv(snpcombsample, file = file.path(outfolder, "haplotype_combinations.csv"), row.names = FALSE)
pheno <- read.csv(phenofile, header = TRUE, sep = "\t")
head(pheno)
SNPcombTables <- getSNPcombTables(snpcombsample, pheno)
head(SNPcombTables)
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
# I am going to fix this
library(magrittr)
library(rstatix)
#The target code
t_test_snpComp <- testSNPcombs(SNPcombTables)
t_test_snpComp
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
library(ggplot2)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
knitr::opts_chunk$set(echo = TRUE)
library(HaploTraitR)
#library(ggplot2)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
#library(ggplot2)
library(ggpubr)
snp <- "2H_JHI-Hv50k-2016-79696"
plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
plotHapCombDistribution(snp, SNPcombTables)
