geom_polygon(color = "black") +
scale_fill_gradient(low = "white", high = "red", na.value = "grey") +
geom_text(data = df_ld, aes(x = SNP_A, y = SNP_B, label = round(R2, 2)), inherit.aes = FALSE) +
coord_fixed()
} else {
# Plot points
gg <- ggplot(df_ld, aes(x = SNP_A, y = SNP_B, color = R2)) +
geom_point(size = point_size) +
scale_color_gradient(low = "white", high = "red", na.value = "grey") +
coord_fixed()
}
# Finalize plot theme
gg + theme_minimal() +
theme(
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()
)
}
# Example Data
df_ld <- data.frame(
SNP_A = c(1, 1, 2, 3),
SNP_B = c(2, 3, 3, 4),
R2 = c(0.8, 0.6, 0.4, 0.9)
)
# Test the function
ggplot_ld(df_ld)
diamonds = TRUE
df_ld
# Validate input
required_cols <- c("SNP_A", "SNP_B", "R2")
if (!all(required_cols %in% colnames(df_ld))) {
stop("Input data frame must contain columns: SNP_A, SNP_B, R2")
}
# Reindex SNPs if requested
if (reindex) {
unique_ids <- unique(c(df_ld$SNP_A, df_ld$SNP_B))
df_ld$SNP_A <- as.numeric(factor(df_ld$SNP_A, levels = unique_ids))
df_ld$SNP_B <- as.numeric(factor(df_ld$SNP_B, levels = unique_ids))
}
reindex = TRUE
# Validate input
required_cols <- c("SNP_A", "SNP_B", "R2")
if (!all(required_cols %in% colnames(df_ld))) {
stop("Input data frame must contain columns: SNP_A, SNP_B, R2")
}
# Reindex SNPs if requested
if (reindex) {
unique_ids <- unique(c(df_ld$SNP_A, df_ld$SNP_B))
df_ld$SNP_A <- as.numeric(factor(df_ld$SNP_A, levels = unique_ids))
df_ld$SNP_B <- as.numeric(factor(df_ld$SNP_B, levels = unique_ids))
}
reverse = FALSE
# Validate input
required_cols <- c("SNP_A", "SNP_B", "R2")
if (!all(required_cols %in% colnames(df_ld))) {
stop("Input data frame must contain columns: SNP_A, SNP_B, R2")
}
# Reindex SNPs if requested
if (reindex) {
unique_ids <- unique(c(df_ld$SNP_A, df_ld$SNP_B))
df_ld$SNP_A <- as.numeric(factor(df_ld$SNP_A, levels = unique_ids))
df_ld$SNP_B <- as.numeric(factor(df_ld$SNP_B, levels = unique_ids))
}
# Reverse y-axis if requested
if (reverse) {
max_snp <- max(df_ld$SNP_B)
df_ld$SNP_B <- max_snp - df_ld$SNP_B + 1
}
if (diamonds) {
# Generate diamond coordinates
diamonds_df <- do.call(rbind, lapply(1:nrow(df_ld), function(i) {
x <- df_ld$SNP_A[i]
y <- df_ld$SNP_B[i]
r2 <- df_ld$R2[i]
data.frame(
x = c(x - 0.5, x, x + 0.5, x),
y = c(y, y + 0.5, y, y - 0.5),
R2 = r2
)
}))
# Plot diamonds with annotations
gg <- ggplot(diamonds_df, aes(x = x, y = y, group = interaction(x, y), fill = R2)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "white", high = "red", na.value = "grey") +
geom_text(data = df_ld, aes(x = SNP_A, y = SNP_B, label = round(R2, 2)), inherit.aes = FALSE) +
coord_fixed()
} else {
# Plot points
gg <- ggplot(df_ld, aes(x = SNP_A, y = SNP_B, color = R2)) +
geom_point(size = point_size) +
scale_color_gradient(low = "white", high = "red", na.value = "grey") +
coord_fixed()
}
gg
if (diamonds) {
# Generate diamond coordinates
diamonds_df <- do.call(rbind, lapply(1:nrow(df_ld), function(i) {
x <- df_ld$SNP_A[i]
y <- df_ld$SNP_B[i]
r2 <- df_ld$R2[i]
data.frame(
x = c(x - 0.5, x, x + 0.5, x),
y = c(y, y + 0.5, y, y - 0.5),
R2 = r2
)
}))
# Plot diamonds with annotations
gg <- ggplot(diamonds_df, aes(x = x, y = y, group = interaction(x, y), fill = R2)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "white", high = "red", na.value = "grey") +
geom_text(data = df_ld, aes(x = SNP_A, y = SNP_B, label = round(R2, 2)), inherit.aes = FALSE) +
coord_fixed()
} else {
# Plot points
gg <- ggplot(df_ld, aes(x = SNP_A, y = SNP_B, color = R2)) +
geom_point(size = point_size) +
scale_color_gradient(low = "white", high = "red", na.value = "grey") +
coord_fixed()
}
gg
diamonds_df
# Plot diamonds with annotations
gg <- ggplot(diamonds_df, aes(x = x, y = y, group = interaction(x, y), fill = R2)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "white", high = "red", na.value = "grey") +
geom_text(data = df_ld, aes(x = SNP_A, y = SNP_B, label = round(R2, 2)), inherit.aes = FALSE) +
coord_fixed()
gg
##################
# Test Data
diamonds_df <- data.frame(
x = c(1, 2, 2, 1, 3, 4, 4, 3),
y = c(1, 1, 2, 2, 3, 3, 4, 4),
R2 = c(0.1, 0.4, 0.7, 0.9, 0.2, 0.5, 0.8, 1)
)
df_ld <- data.frame(
SNP_A = c(1, 2, 3, 4),
SNP_B = c(1, 2, 3, 4),
R2 = c(0.1, 0.4, 0.7, 0.9)
)
# Plot
gg <- ggplot(diamonds_df, aes(x = x, y = y, group = interaction(x, y), fill = R2)) +
geom_polygon(color = "black") + # Add diamonds with borders
scale_fill_gradient(low = "white", high = "red", na.value = "grey") + # Color gradient
geom_text(data = df_ld, aes(x = SNP_A, y = SNP_B, label = round(R2, 2)), inherit.aes = FALSE) + # R2 labels
coord_fixed() + # Maintain aspect ratio
theme_minimal() # Clean theme
print(gg)
diamonds_df
# Plot diamonds with annotations
gg <- ggplot(diamonds_df, aes(x = x, y = y, group = interaction(x, y), fill = R2)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "white", high = "red", na.value = "grey") +
geom_text(data = df_ld, aes(x = SNP_A, y = SNP_B, label = round(R2, 2)), inherit.aes = FALSE) +
coord_fixed()
gg
diamonds = TRUE
reindex = TRUE
reverse = FALSE
# Validate input
required_cols <- c("SNP_A", "SNP_B", "R2")
if (!all(required_cols %in% colnames(df_ld))) {
stop("Input data frame must contain columns: SNP_A, SNP_B, R2")
}
# Reindex SNPs if requested
if (reindex) {
unique_ids <- unique(c(df_ld$SNP_A, df_ld$SNP_B))
df_ld$SNP_A <- as.numeric(factor(df_ld$SNP_A, levels = unique_ids))
df_ld$SNP_B <- as.numeric(factor(df_ld$SNP_B, levels = unique_ids))
}
# Reverse y-axis if requested
if (reverse) {
max_snp <- max(df_ld$SNP_B)
df_ld$SNP_B <- max_snp - df_ld$SNP_B + 1
}
# Generate diamond coordinates
diamonds_df <- do.call(rbind, lapply(1:nrow(df_ld), function(i) {
x <- df_ld$SNP_A[i]
y <- df_ld$SNP_B[i]
r2 <- df_ld$R2[i]
data.frame(
x = c(x - 0.5, x, x + 0.5, x),
y = c(y, y + 0.5, y, y - 0.5),
R2 = r2
)
}))
diamonds_df
# Plot diamonds with annotations
gg <- ggplot(diamonds_df, aes(x = x, y = y, group = interaction(x, y), fill = R2)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "white", high = "red", na.value = "grey") +
geom_text(data = df_ld, aes(x = SNP_A, y = SNP_B, label = round(R2, 2)), inherit.aes = FALSE) +
coord_fixed()
gg
gg
# Example Data
df_ld <- data.frame(
SNP_A = c(1, 1, 2, 3),
SNP_B = c(2, 3, 3, 4),
R2 = c(0.8, 0.6, 0.4, 0.9)
)
diamonds = TRUE
reindex = TRUE
reverse = FALSE
# Validate input
required_cols <- c("SNP_A", "SNP_B", "R2")
if (!all(required_cols %in% colnames(df_ld))) {
stop("Input data frame must contain columns: SNP_A, SNP_B, R2")
}
# Reindex SNPs if requested
if (reindex) {
unique_ids <- unique(c(df_ld$SNP_A, df_ld$SNP_B))
df_ld$SNP_A <- as.numeric(factor(df_ld$SNP_A, levels = unique_ids))
df_ld$SNP_B <- as.numeric(factor(df_ld$SNP_B, levels = unique_ids))
}
# Reverse y-axis if requested
if (reverse) {
max_snp <- max(df_ld$SNP_B)
df_ld$SNP_B <- max_snp - df_ld$SNP_B + 1
}
if (diamonds) {
# Generate diamond coordinates
diamonds_df <- do.call(rbind, lapply(1:nrow(df_ld), function(i) {
x <- df_ld$SNP_A[i]
y <- df_ld$SNP_B[i]
r2 <- df_ld$R2[i]
data.frame(
x = c(x - 0.5, x, x + 0.5, x),
y = c(y, y + 0.5, y, y - 0.5),
R2 = r2
)
}))
diamonds_df
# Plot diamonds with annotations
gg <- ggplot(diamonds_df, aes(x = x, y = y, group = interaction(x, y), fill = R2)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "white", high = "red", na.value = "grey") +
geom_text(data = df_ld, aes(x = SNP_A, y = SNP_B, label = round(R2, 2)), inherit.aes = FALSE) +
coord_fixed()
gg
} else {
# Plot points
gg <- ggplot(df_ld, aes(x = SNP_A, y = SNP_B, color = R2)) +
geom_point(size = point_size) +
scale_color_gradient(low = "white", high = "red", na.value = "grey") +
coord_fixed()
}
# Generate diamond coordinates
diamonds_df <- do.call(rbind, lapply(1:nrow(df_ld), function(i) {
x <- df_ld$SNP_A[i]
y <- df_ld$SNP_B[i]
r2 <- df_ld$R2[i]
data.frame(
x = c(x - 0.5, x, x + 0.5, x),
y = c(y, y + 0.5, y, y - 0.5),
R2 = r2
)
}))
diamonds_df
# Plot diamonds with annotations
gg <- ggplot(diamonds_df, aes(x = x, y = y, group = interaction(x, y), fill = R2)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "white", high = "red", na.value = "grey") +
geom_text(data = df_ld, aes(x = SNP_A, y = SNP_B, label = round(R2, 2)), inherit.aes = FALSE) +
coord_fixed()
gg
# Finalize plot theme
gg + theme_minimal() +
theme(
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()
)
library(ggplot2)
library(dplyr)
# Test Data: Define centers of diamonds
diamonds_df <- data.frame(
x = c(1, 2, 3, 4),
y = c(1, 2, 3, 4),
R2 = c(0.1, 0.4, 0.7, 0.9)
)
# Helper Function to Create Diamond Vertices
create_diamond <- function(center_x, center_y, size = 0.5) {
data.frame(
x = c(center_x, center_x + size, center_x, center_x - size),
y = c(center_y + size, center_y, center_y - size, center_y),
group = paste(center_x, center_y, sep = "_")
)
}
# Generate Data for All Diamonds
diamond_vertices <- diamonds_df %>%
rowwise() %>%
do(create_diamond(.$x, .$y)) %>%
left_join(diamonds_df, by = c("x" = "x", "y" = "y"))
# Plot Diamonds with Fill and Text
gg <- ggplot() +
geom_polygon(
data = diamond_vertices,
aes(x = x, y = y, group = group, fill = R2),
color = "black"
) +
scale_fill_gradient(low = "white", high = "red", na.value = "grey") +
geom_text(
data = diamonds_df,
aes(x = x, y = y, label = round(R2, 2)),
inherit.aes = FALSE
) +
coord_fixed() +
theme_minimal()
print(gg)
diamond_vertices
df_ld
diamonds_df
# Plot Diamonds with Fill and Text
gg <- ggplot() +
geom_polygon(
data = diamond_vertices,
aes(x = x, y = y),
color = "black"
) +
scale_fill_gradient(low = "white", high = "red", na.value = "grey") +
geom_text(
data = diamonds_df,
aes(x = x, y = y, label = round(R2, 2)),
inherit.aes = FALSE
) +
coord_fixed() +
theme_minimal()
print(gg)
1 + 1
library(HaploTraitR)
# Define file paths and output folder
hapfile <- "sampledata/Barley_50K_KNNimp.hmp.txt"
gwasfile <- "sampledata/SignificantSNP_GWAS.tsv"
phenofile <- "sampledata/Pheno_ANN19.tsv"
outfolder <- "sampleout"
dist_threshold <- 1000000 # Distance threshold (1Mb)
dist_cluster_count <- 5   # Minimum SNPs in a cluster
ld_threshold <- 0.3       # Minimum LD value
comb_freq_threshold <- 0.1 # Minimum genotype frequency for a combination
#First, load the GWAS data to identify significant SNPs for clustering.
gwas <- readGWAS(gwasfile, sep = "\t")
head(gwas)
hapmap <- readHapmap(hapfile)
haplotype_clusters <- getHaplotypeClusters(gwas, hapmap, dist_threshold, dist_cluster_count)
LDsInfo <- computeLDclusters(hapmap, haplotype_clusters)
outfolder
# Extract LD matrices and cluster info
out_info <- LDsInfo$out_info
ld_folder <- LDsInfo$ld_folder
# Initialize list to store ggplot objects
ld_plots <- list()
# Loop through each LD matrix
for (i in 1:nrow(out_info)) {
chr <- out_info[i, 1]
cls <- out_info[i, 2]
# Read LD matrix
LD_matrix_file <- file.path(ld_folder, paste(chr, cls, "ld_matrix.csv", sep = "_"))
LD_matrix <- read.csv(LD_matrix_file, header = TRUE, row.names = 1)
# Generate LD heatmap plot
plt <- plotLDheatmap(LD_matrix_file, hapmap = NULL)
# Save plot to file
plot_file <- file.path(outfolder, paste(chr, cls, "ld_heatmap.png", sep = "_"))
ggsave(plot_file, plt, width = 10, height = 10, units = "in", dpi = 300)
# Add plot to list
ld_plots[[length(ld_plots) + 1]] <- plt
}
library(reshape2)
# Extract LD matrices and cluster info
out_info <- LDsInfo$out_info
ld_folder <- LDsInfo$ld_folder
# Initialize list to store ggplot objects
ld_plots <- list()
# Loop through each LD matrix
for (i in 1:nrow(out_info)) {
chr <- out_info[i, 1]
cls <- out_info[i, 2]
# Read LD matrix
LD_matrix_file <- file.path(ld_folder, paste(chr, cls, "ld_matrix.csv", sep = "_"))
LD_matrix <- read.csv(LD_matrix_file, header = TRUE, row.names = 1)
# Generate LD heatmap plot
plt <- plotLDheatmap(LD_matrix_file, hapmap = NULL)
# Save plot to file
plot_file <- file.path(outfolder, paste(chr, cls, "ld_heatmap.png", sep = "_"))
ggsave(plot_file, plt, width = 10, height = 10, units = "in", dpi = 300)
# Add plot to list
ld_plots[[length(ld_plots) + 1]] <- plt
}
library('snplinkage')
# Loop through each LD matrix
for (i in 1:nrow(out_info)) {
chr <- out_info[i, 1]
cls <- out_info[i, 2]
# Read LD matrix
LD_matrix_file <- file.path(ld_folder, paste(chr, cls, "ld_matrix.csv", sep = "_"))
LD_matrix <- read.csv(LD_matrix_file, header = TRUE, row.names = 1)
# Generate LD heatmap plot
plt <- plotLDheatmap(LD_matrix_file, hapmap = NULL)
# Save plot to file
plot_file <- file.path(outfolder, paste(chr, cls, "ld_heatmap.png", sep = "_"))
ggsave(plot_file, plt, width = 10, height = 10, units = "in", dpi = 300)
# Add plot to list
ld_plots[[length(ld_plots) + 1]] <- plt
}
library(ggplot2)
# Loop through each LD matrix
for (i in 1:nrow(out_info)) {
chr <- out_info[i, 1]
cls <- out_info[i, 2]
# Read LD matrix
LD_matrix_file <- file.path(ld_folder, paste(chr, cls, "ld_matrix.csv", sep = "_"))
LD_matrix <- read.csv(LD_matrix_file, header = TRUE, row.names = 1)
# Generate LD heatmap plot
plt <- plotLDheatmap(LD_matrix_file, hapmap = NULL)
# Save plot to file
plot_file <- file.path(outfolder, paste(chr, cls, "ld_heatmap.png", sep = "_"))
ggsave(plot_file, plt, width = 10, height = 10, units = "in", dpi = 300)
# Add plot to list
ld_plots[[length(ld_plots) + 1]] <- plt
}
LDsInfo
#' Plot LD heatmap from LDs Info table
#' @param LDsInfo a list containing the LD matrices and the info of the clusters
#' @param outfolder The output folder to save the LD heatmap plots
#' @return A list of ggplot objects showing the LD heatmaps
#' @export
plotLDheatmapFromLDsInfo <- function(LDsInfo, outfolder, snps=NULL) {
# Check if outfolder exists
if (!dir.exists(outfolder)) {
stop("The specified outfolder does not exist.")
}
# if a vector of snps is provided, use it
if (!is.null(snps)) {
LDsInfo$out_info <- LDsInfo$out_info[LDsInfo$out_info[, 1] %in% snps, ]
}
# Extract LD matrices and cluster info
out_info <- LDsInfo$out_info
ld_folder <- LDsInfo$ld_folder
# Initialize list to store ggplot objects
ld_plots <- list()
# Loop through each LD matrix
for (i in 1:nrow(out_info)) {
chr <- out_info[i, 1]
cls <- out_info[i, 2]
# Read LD matrix
LD_matrix_file <- file.path(ld_folder, paste(chr, cls, "ld_matrix.csv", sep = "_"))
LD_matrix <- read.csv(LD_matrix_file, header = TRUE, row.names = 1)
# Generate LD heatmap plot
plt <- plotLDheatmap(LD_matrix_file, hapmap = NULL)
# Save plot to file
plot_file <- file.path(outfolder, paste(chr, cls, "ld_heatmap.png", sep = "_"))
ggsave(plot_file, plt, width = 10, height = 10, units = "in", dpi = 300)
# Add plot to list
ld_plots[[length(ld_plots) + 1]] <- plt
}
return(ld_plots)
}
#################### Combination matrix
snps<-unique(snpcombsample$snp)
snp_hap_info<-snpcombsample[snpcombsample$snp==snps[1],]
combs<-snp_hap_info$comb
combs.samples<-snp_hap_info$samples
combs.samples<-strsplit(combs.samples, "\\|")
combs.samples.n<-lapply(combs.samples, length)
combs.samples.n<-unlist(combs.samples.n)
combs.samples.n<-data.frame(comb=paste0("Comb", 1:length(combs.samples.n)), nsamples=combs.samples.n)
# creat a matrix of combs
combs<-strsplit(combs, "\\|")
# 2 matrix
combs<-do.call(rbind, combs)
rownames(combs)<-paste0("Comb", 1:nrow(combs))
colnames(combs)<-paste0("Geno", 1:ncol(combs))
####################
library(ComplexHeatmap)
set.seed(123)
row_ha = rowAnnotation(n =  anno_barplot(combs.samples.n$nsamples))
library(RColorBrewer)
col = list(foo = col_fun,
bar = c("a" = "red", "b" = "green", "c" = "blue"))
p<-Heatmap(combs, name = "genotype",  right_annotation = row_ha,
column_title = "Genotype", row_title = "Combination")
p
#
combs.samples
# Now lets create a matrix of samples
longestComb<-max(combs.samples.n$nsamples)
# create a matrix of samples
samples<-matrix(NA, nrow = nrow(combs.samples.n), ncol = longestComb)
# loop and fill the matrix
for(i in 1:nrow(combs.samples.n))
{
samples[i, 1:length(combs.samples[[i]])]<-pheno[pheno$Taxa %in% combs.samples[[i]],2]
}
samples
ha = rowAnnotation(foo = anno_boxplot(samples, height = unit(4, "cm"),
gp = gpar(fill = 1:10)),
bar = anno_barplot(combs.samples.n$nsamples))
ha
# add the annotation to the heatmap
mycolors<-brewer.pal(9, "Set1")
Heatmap(combs, name = "genotype", right_annotation = ha,
column_title = "Genotype", row_title = "Combination")
#library(ggplot2)
#library(ggpubr)
snp <- "2H_JHI-Hv50k-2016-79696"
HaploTraitR::plotHapCombBoxPlot(snp, SNPcombTables, t_test_snpComp)
ggplot2::ggsave(file.path(outfolder, paste0(snp, "_boxplot.png")), width = 8, height = 6)
plotHapCombDistribution(snp, SNPcombTables)
ggplot2::ggsave(file.path(outfolder, paste0(snp, "_distribution.png")), width = 8, height = 6)
